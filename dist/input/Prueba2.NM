

class Nodo{

    int[][] padre;

    Nodo [][][] getNew(){
	return new Nodo[100][2][50]; 
    }

    void LlenarArreglo(int a, int b, int[][] arr){
	for(int x = 0; x < a; x++){
		for(int y = 0; y < b; y++){
			arr[x][y] = x*b+y;
		}
	}
    }

    void LlenarArregloSize(int[][] arr){
	for(int x = 0; x < arr.size; x++){
		for(int y = 0; y < arr[x].size; y++){
			arr[x][y] = x*arr[x].size+y;
		}
	}
    }

    void verArreglo(int a, int b, int[][] arr){
	for(int x = 0; x < a; x++){
		for(int y = 0; y < b; y++){
			println("arr[" + x + "][" + y + "] = " + arr[x][y]);
		}
	}
    }

    void verArregloSize(int[][] arr){
	for(int x = 0; x < arr.size; x++){
		for(int y = 0; y < arr[x].size; y++){
			println("dim2[" + x + "][" + y + "] = " + arr[x][y]);
		}
	}
    }
    
    void verArregloSize(int[][][][] arr){
	for(int x = 0; x < arr.size; x++){
		for(int y = 0; y < arr[x].size; y++){
			for(int z = 0; z < arr[x][y].size; z++){
				for(int w = 0; w < arr[x][y][z].size; w++){
					println("dim4[" + x + "][" + y + "][" + z + "][" + w + "] = " + arr[x][y][z][w]);
				}
			}
		}
	}
    }

    int [][] getArregloInt(int a, int b){
	return new Int[a][b];
    }

    int tak(int x, int y, int z){
	if (y >= x) {
		return z;
	} else {
		return tak(tak(x-1, y, z), tak(y-1, z, x), tak(z-1, x, y));
	}
    }

    void main(){
	Nodo principal = new Nodo();//principal.padre
	principal.padre = {{1,2,3,4,5},{6,7,8,9,10}};
	int[][][][] prueba = {{{{1,2,3,4,5},{6,7,8,9,10}},{{11,12,13,14,15},{1000},{16,17,18,19,20}}},{{{21,22,23,24,25},{26,27,28,29,30}},{{31,32,33,34,35},{36,37,38,39,40}}}};
	println("--------------------------------------------------------");
	principal.verArregloSize(principal.padre);
	println("--------------------------------------------------------");
	principal.verArregloSize(prueba);
	println("--------------------------------------------------------");
	principal.verArregloSize({{{{1,2,3,4,5},{6,7,8,9,10}},{{11,12,13,14,15},{1000},{16,17,18,19,20}}},{{{21,22,23,24,25},{26,27,28,29,30}},{{31,32,33,34,35},{36,37,38,39,40}}}});
	println("--------------------------------------------------------");
	principal.verArregloSize(prueba[0][0]);
	println("--------------------------------------------------------");
    }

}

