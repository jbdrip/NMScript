Import "EntradasFase2/NodoAVL.NM";

 class ArbolAVL{
	
	 NodoAVL raiz;

	 ArbolAVL(){
		raiz = null;
	}


     void preorden() {
        Println("--------------- Recorrido preorden ---------------");
        preorden(raiz);
        Println("");
    }

     void preorden(NodoAVL a) {
        //Println("Valor a = " + a);
        if (a == null) {
            return;
        }
        Print(a.valor + ",");
        preorden(a.izquierdo);
        preorden(a.derecho);
    }

     void inorden() {
        Println("--------------- Recorrido inorden ---------------");
        inorden(raiz);
        Println("");
    }

     void inorden(NodoAVL a) {
        //Println("Valor a = " + a);
        if (a == null) {
            return;
        }
        inorden(a.izquierdo);
        Print(a.valor + ",");
        inorden(a.derecho);
    }

     void postorden() {
        Println("--------------- Recorrido postorden ---------------");
        postorden(raiz);
        Println("");
    }

     void postorden(NodoAVL a) {
        //Println("Valor a = " + a);
        if (a == null) {
            return;
        }
        postorden(a.izquierdo);
        postorden(a.derecho);
        Print(a.valor + ",");
    }

     String getDot() {
        return raiz.getDot();
    }




	 void insertar(int valor) {
        raiz = insertar(valor, raiz);
    }



     NodoAVL insertar(int valor, NodoAVL raiz) {
        //Si en nodo recibido fuera nulo entonces el nuevo nodo se puede insertar 
        //en esa posición y se terminan las llamadas recursivas a este método.
        if (raiz == null) {
            raiz = new NodoAVL(valor);
            //Si el nuevo valor fuera menor que el nodo de actual entonces
        } else if (valor < raiz.valor) {
            //Se llama recursivamente al método para explorar el subarbol izquierdo
            //porque el valor a insertar es menor que el del nodo actual.
            raiz.izquierdo = insertar(valor, raiz.izquierdo);
            if (altura(raiz.derecho) - altura(raiz.izquierdo) == -2) //Si el factor de equilibrio esta desbalanceado, hay que hacer 
            //rotación de nodos, como el fe=-2 hay dos posibilidades de 
            //rotación dependiendo de:
            {
                if (valor < raiz.izquierdo.valor) //Si el nuevo valor fuera menor que la izquierda del nodo des-
                //balanceado, se sabe que el nuevo nodo será insertado a la 
                //izquierda de la actual izquierda, entonces tenemos una rotación 
                //simple por la izquierda o sea una IzquierdaIzquierda.
                {
                    raiz = IzquierdaIzquierda(raiz);
                } else //de lo contrario, se sabe que el nuevo nodo será insertado 
                //a la derecha del la actual izquierda, por lo que se tiene 
                //un caso de rotación doble por la izquierda 
                //o sea una IzquierdaDerecha.
                {
                    raiz = IzquierdaDerecha(raiz);
                }
            }
        } else if (valor > raiz.valor) //Si el nuevo valor fuera mayor que el nodo de la actual entonces:
        {
            //Se llama recursivamente al método para explorar el subarbol derecho
            //porque el valor a insertar es mayor que el del nodo actual.            
            raiz.derecho = insertar(valor, raiz.derecho);
            if (altura(raiz.derecho) - altura(raiz.izquierdo) == 2) //Si el factor de equilibrio esta desbalanceado, hay que hacer 
            //rotación de nodos, como el fe=2 hay dos posibilidades de 
            //rotación dependiendo de:                
            {
                if (valor > raiz.derecho.valor) //Si el nuevo valor fuera mayor que la derecha del nodo des-
                //balanceado, se sabe que el nuevo nodo será insertado a la 
                //derecha de la actual derecha, entonces tenemos una rotación 
                //simple por la derecha o sea una DerechaDerecha.                    
                {
                    raiz = DerechaDerecha(raiz);
                } else //de lo contrario, se sabe que el nuevo nodo será insertado 
                //a la izquierda del la actual derecha, por lo que se tiene 
                //un caso de rotación doble por la derecha
                //o sea una DerechaIzquierda.
                {
                    raiz = DerechaIzquierda(raiz);
                }
            }
        } else // De lo contrario signifca que el valor que se quiere insertar ya existe, 
        //como no se permite la duplicidad de este dato no se hace nada.
        {
            Println("No se permiten los valores duplicados: \""
                    + valor + "\".");
        }

        //finalmente, por cada llamada recursiva debe hacerse una reasignacion 
        //de la altura esta se hará hasta para los nodos que no cambiaron de nivel 
        //en el transcurso porque no hay forma de saber cuales cambiaron de nivel 
        //y cuales no. La altura,será la altura del hijo que tiene
        //la altura más grande, es decir, la rama mas profunda, más 1.
        raiz.altura = mayor(altura(raiz.izquierdo), altura(raiz.derecho)) + 1;
        return raiz;
    }

    /**
     * Método que devuelve la altura de un nodo.
     *
     * @param nodo
     * @return
     */
     int altura(NodoAVL nodo) {
        if (nodo == null) {
            return -1;
        } else {
            return nodo.altura;
        }
    }

    /**
     * Método que recibe como parámetro dos numeros y devuelve el mayor.
     *
     * @param n1
     * @param n2
     * @return
     */
     int mayor(int n1, int n2) {
        //return n1 > n2 ? n1 : n2;
        if(n1 > n2){
            return n1;
        }else{
            return n2;
        }
    }

    /**
     * Rotación simple izquierda izquierda para el proceso de balanceo.
     *
     * @param n1
     * @return
     */
     NodoAVL IzquierdaIzquierda(NodoAVL n1) {
        NodoAVL n2 = n1.izquierdo;
        n1.izquierdo = n2.derecho;
        n2.derecho = n1;
        n1.altura = mayor(altura(n1.izquierdo), altura(n1.derecho)) + 1;
        n2.altura = mayor(altura(n2.izquierdo), n1.altura) + 1;
        return n2;
    }

    /**
     * Rotación simple derecha derecha para el proceso de balanceo.
     *
     * @param n1
     * @return
     */
     NodoAVL DerechaDerecha(NodoAVL n1) {
        NodoAVL n2 = n1.derecho;
        n1.derecho = n2.izquierdo;
        n2.izquierdo = n1;
        n1.altura = mayor(altura(n1.izquierdo), altura(n1.derecho)) + 1;
        n2.altura = mayor(altura(n2.derecho), n1.altura) + 1;
        return n2;
    }

    /**
     * Rotación doble izuquierda derecha para el proceso de balanceo.
     *
     * @param n1
     * @return
     */
     NodoAVL IzquierdaDerecha(NodoAVL n1) {
        n1.izquierdo = DerechaDerecha(n1.izquierdo);
        return IzquierdaIzquierda(n1);
    }

    /**
     * Rotación doble derecha izquierda para el proceso de balanceo.
     *
     * @param n1
     * @return
     */
     NodoAVL DerechaIzquierda(NodoAVL n1) {
        n1.derecho = IzquierdaIzquierda(n1.derecho);
        return DerechaDerecha(n1);
    }


}