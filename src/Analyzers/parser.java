
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import proyecto_olc1.*;
import java.util.ArrayList;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.Iterator;
import java.util.LinkedList;
import Tree.Instruction;
import Tree.Print;
import Tree.Expression;
import Tree.Declaration;
import Tree.Signature;
import Tree.For;
import Tree.If;
import Tree.Switch;
import Tree.While;
import Tree.Case;
import Tree.Continue;
import Tree.Break;
import Tree.DoWhile;
import Tree.GraphDot;
import Tree.GraphEnv;
import Tree.Import;
import Tree.Void;
import Tree.Function;
import Tree.FunctionVoid_Call;
import Tree.Return;
import Tree.Expression.Expression_type;
import Tree.Class_;
import Tree.Instance;
import Enviroment.Sym.EnumType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\034\011\000\002" +
    "\034\004\000\002\034\012\000\002\034\006\000\002\034" +
    "\011\000\002\034\007\000\002\034\005\000\002\033\007" +
    "\000\002\033\006\000\002\032\005\000\002\032\006\000" +
    "\002\006\005\000\002\006\003\000\002\027\010\000\002" +
    "\027\011\000\002\027\011\000\002\027\012\000\002\027" +
    "\007\000\002\027\010\000\002\027\010\000\002\027\011" +
    "\000\002\030\010\000\002\030\011\000\002\030\011\000" +
    "\002\030\012\000\002\030\010\000\002\030\011\000\002" +
    "\030\011\000\002\030\012\000\002\030\011\000\002\030" +
    "\012\000\002\030\012\000\002\030\013\000\002\030\011" +
    "\000\002\030\012\000\002\030\012\000\002\030\013\000" +
    "\002\005\006\000\002\005\006\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\026" +
    "\004\000\002\017\006\000\002\017\004\000\002\017\011" +
    "\000\002\017\011\000\002\017\007\000\002\017\005\000" +
    "\002\035\005\000\002\035\004\000\002\007\006\000\002" +
    "\007\005\000\002\020\005\000\002\020\011\000\002\020" +
    "\010\000\002\020\007\000\002\020\007\000\002\020\007" +
    "\000\002\022\013\000\002\022\013\000\002\022\012\000" +
    "\002\022\012\000\002\024\012\000\002\024\011\000\002" +
    "\023\011\000\002\023\010\000\002\021\011\000\002\021" +
    "\010\000\002\021\012\000\002\021\011\000\002\021\012" +
    "\000\002\021\011\000\002\021\013\000\002\021\012\000" +
    "\002\010\013\000\002\010\012\000\002\010\012\000\002" +
    "\010\011\000\002\004\006\000\002\004\005\000\002\025" +
    "\011\000\002\011\007\000\002\011\006\000\002\011\006" +
    "\000\002\011\005\000\002\011\006\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\014\006\000\002" +
    "\014\006\000\002\015\010\000\002\016\005\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\004\000\002" +
    "\013\004\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\102\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\004\054\u0172\001\002\000\112" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\030\uffef\034\uffef\052" +
    "\uffef\057\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\100\uffef\101\uffef\001\002\000\006\010\u014d" +
    "\031\256\001\002\000\004\057\u014a\001\002\000\004\054" +
    "\u0149\001\002\000\060\016\uff6c\032\uff6c\033\uff6c\034\uff6c" +
    "\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\060\uff6c\062\uff6c\001" +
    "\002\000\006\010\uff88\031\uff88\001\002\000\060\016\uff6b" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\053\uff6b\054\uff6b\055\uff6b\056" +
    "\uff6b\060\uff6b\062\uff6b\001\002\000\004\057\u0144\001\002" +
    "\000\004\057\u0130\001\002\000\004\061\u0124\001\002\000" +
    "\112\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\030\ufffe\034\ufffe" +
    "\052\ufffe\057\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\067" +
    "\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\101\ufffe\001\002\000\112\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\030\ufff3\034\ufff3\052\ufff3" +
    "\057\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\101\ufff3\001\002\000\104\002\000\004" +
    "\067\005\041\006\036\007\024\010\052\011\037\012\011" +
    "\013\032\014\043\015\034\017\033\020\023\021\012\022" +
    "\055\023\070\024\013\030\022\034\031\052\062\057\044" +
    "\063\026\064\027\065\040\067\061\070\042\071\016\072" +
    "\015\075\053\076\065\077\007\100\025\101\014\001\002" +
    "\000\004\016\u0122\001\002\000\006\010\uff89\031\uff89\001" +
    "\002\000\060\016\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f" +
    "\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\053\uff6f" +
    "\054\uff6f\055\uff6f\056\uff6f\060\uff6f\062\uff6f\001\002\000" +
    "\004\057\u011f\001\002\000\032\004\067\005\041\006\036" +
    "\007\024\010\113\011\037\012\011\024\013\030\022\034" +
    "\031\052\062\057\044\001\002\000\004\057\u011c\001\002" +
    "\000\112\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2\034" +
    "\ufff2\052\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\001\002\000\032" +
    "\004\067\005\041\006\036\007\024\010\113\011\037\012" +
    "\011\024\013\030\022\034\031\052\062\057\044\001\002" +
    "\000\004\010\u010e\001\002\000\006\010\uff8a\031\uff8a\001" +
    "\002\000\004\010\u0109\001\002\000\112\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\030\ufff6\034\ufff6\052\ufff6\057\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\001\002\000\060\016\uff70\032\uff70\033\uff70" +
    "\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70" +
    "\051\uff70\053\uff70\054\uff70\055\uff70\056\uff70\060\uff70\062" +
    "\uff70\001\002\000\060\016\uff6d\032\uff6d\033\uff6d\034\uff6d" +
    "\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\060\uff6d\062\uff6d\001" +
    "\002\000\004\057\346\001\002\000\060\016\uff71\032\uff71" +
    "\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71" +
    "\050\uff71\051\uff71\053\uff71\054\uff71\055\uff71\056\uff71\060" +
    "\uff71\062\uff71\001\002\000\004\057\337\001\002\000\034" +
    "\004\067\005\041\006\036\007\024\010\113\011\037\012" +
    "\011\024\013\030\022\034\031\052\062\054\334\057\044" +
    "\001\002\000\032\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\030\022\034\031\052\062" +
    "\057\044\001\002\000\112\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\030\ufff1\034\ufff1\052\ufff1\057\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\001\002\000\004\054\331\001\002\000\112\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\030\ufff5\034\ufff5\052\ufff5\057\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\100\ufff5\101\ufff5\001\002\000\004\054\330\001\002\000" +
    "\004\054\327\001\002\000\060\010\222\016\uff6a\025\121" +
    "\026\117\031\221\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037" +
    "\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\051\uff6a\054\uff6a\056\uff6a\057" +
    "\220\001\002\000\004\054\217\001\002\000\004\054\216" +
    "\001\002\000\006\010\uff87\031\uff87\001\002\000\004\054" +
    "\215\001\002\000\112\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\030\ufff4\034\ufff4\052\ufff4\057\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001" +
    "\002\000\004\054\214\001\002\000\004\057\174\001\002" +
    "\000\032\004\067\005\041\006\036\007\024\010\113\011" +
    "\037\012\011\024\013\030\022\034\031\052\062\057\044" +
    "\001\002\000\060\016\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66" +
    "\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\060\uff66\062\uff66\001\002" +
    "\000\004\002\172\001\002\000\004\054\171\001\002\000" +
    "\046\016\076\033\105\034\075\035\073\036\100\037\101" +
    "\040\106\041\112\042\110\043\104\044\072\045\071\046" +
    "\102\047\111\050\074\051\103\054\107\056\077\001\002" +
    "\000\060\016\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\053\uff6e\054" +
    "\uff6e\055\uff6e\056\uff6e\060\uff6e\062\uff6e\001\002\000\006" +
    "\010\uff86\031\uff86\001\002\000\032\004\067\005\041\006" +
    "\036\007\024\010\113\011\037\012\011\024\013\030\022" +
    "\034\031\052\062\057\044\001\002\000\032\004\067\005" +
    "\041\006\036\007\024\010\113\011\037\012\011\024\013" +
    "\030\022\034\031\052\062\057\044\001\002\000\032\004" +
    "\067\005\041\006\036\007\024\010\113\011\037\012\011" +
    "\024\013\030\022\034\031\052\062\057\044\001\002\000" +
    "\032\004\067\005\041\006\036\007\024\010\113\011\037" +
    "\012\011\024\013\030\022\034\031\052\062\057\044\001" +
    "\002\000\032\004\067\005\041\006\036\007\024\010\113" +
    "\011\037\012\011\024\013\030\022\034\031\052\062\057" +
    "\044\001\002\000\032\004\067\005\041\006\036\007\024" +
    "\010\113\011\037\012\011\024\013\030\022\034\031\052" +
    "\062\057\044\001\002\000\036\004\067\005\041\006\036" +
    "\007\024\010\113\011\037\012\011\024\013\027\147\030" +
    "\022\034\031\052\062\057\044\061\146\001\002\000\032" +
    "\004\067\005\041\006\036\007\024\010\113\011\037\012" +
    "\011\024\013\030\022\034\031\052\062\057\044\001\002" +
    "\000\032\004\067\005\041\006\036\007\024\010\113\011" +
    "\037\012\011\024\013\030\022\034\031\052\062\057\044" +
    "\001\002\000\032\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\030\022\034\031\052\062" +
    "\057\044\001\002\000\032\004\067\005\041\006\036\007" +
    "\024\010\113\011\037\012\011\024\013\030\022\034\031" +
    "\052\062\057\044\001\002\000\032\004\067\005\041\006" +
    "\036\007\024\010\113\011\037\012\011\024\013\030\022" +
    "\034\031\052\062\057\044\001\002\000\032\004\067\005" +
    "\041\006\036\007\024\010\113\011\037\012\011\024\013" +
    "\030\022\034\031\052\062\057\044\001\002\000\032\004" +
    "\067\005\041\006\036\007\024\010\113\011\037\012\011" +
    "\024\013\030\022\034\031\052\062\057\044\001\002\000" +
    "\112\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\030\uffee\034\uffee" +
    "\052\uffee\057\uffee\062\uffee\063\uffee\064\uffee\065\uffee\067" +
    "\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee" +
    "\076\uffee\077\uffee\100\uffee\101\uffee\001\002\000\032\004" +
    "\067\005\041\006\036\007\024\010\113\011\037\012\011" +
    "\024\013\030\022\034\031\052\062\057\044\001\002\000" +
    "\032\004\067\005\041\006\036\007\024\010\113\011\037" +
    "\012\011\024\013\030\022\034\031\052\062\057\044\001" +
    "\002\000\032\004\067\005\041\006\036\007\024\010\113" +
    "\011\037\012\011\024\013\030\022\034\031\052\062\057" +
    "\044\001\002\000\070\016\uff6a\025\121\026\117\031\116" +
    "\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040" +
    "\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a" +
    "\047\uff6a\050\uff6a\051\uff6a\053\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\057\115\060\uff6a\062\uff6a\001\002\000\060\016\076" +
    "\032\uff7f\033\105\034\075\035\073\036\100\037\101\040" +
    "\106\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f\056" +
    "\uff7f\060\uff7f\062\uff7f\001\002\000\034\004\067\005\041" +
    "\006\036\007\024\010\113\011\037\012\011\024\013\030" +
    "\022\034\031\052\062\057\044\060\130\001\002\000\032" +
    "\004\067\005\041\006\036\007\024\010\113\011\037\012" +
    "\011\024\013\030\022\034\031\052\062\057\044\001\002" +
    "\000\060\016\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036" +
    "\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67" +
    "\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\053\uff67\054" +
    "\uff67\055\uff67\056\uff67\060\uff67\062\uff67\001\002\000\062" +
    "\016\uff69\031\122\032\uff69\033\uff69\034\uff69\035\uff69\036" +
    "\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\053\uff69\054" +
    "\uff69\055\uff69\056\uff69\060\uff69\062\uff69\001\002\000\060" +
    "\016\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68" +
    "\046\uff68\047\uff68\050\uff68\051\uff68\053\uff68\054\uff68\055" +
    "\uff68\056\uff68\060\uff68\062\uff68\001\002\000\032\004\067" +
    "\005\041\006\036\007\024\010\113\011\037\012\011\024" +
    "\013\030\022\034\031\052\062\057\044\001\002\000\044" +
    "\016\076\032\124\033\105\034\075\035\073\036\100\037" +
    "\101\040\106\041\112\042\110\043\104\044\072\045\071" +
    "\046\102\047\111\050\074\051\103\001\002\000\062\016" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\060\uffb5\062\uffb5\001\002\000\044\016" +
    "\076\032\126\033\105\034\075\035\073\036\100\037\101" +
    "\040\106\041\112\042\110\043\104\044\072\045\071\046" +
    "\102\047\111\050\074\051\103\001\002\000\062\016\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\060\uffb4\062\uffb4\001\002\000\006\053\133" +
    "\060\132\001\002\000\060\016\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\062\uffe0" +
    "\001\002\000\050\016\076\033\105\034\075\035\073\036" +
    "\100\037\101\040\106\041\112\042\110\043\104\044\072" +
    "\045\071\046\102\047\111\050\074\051\103\053\uffdd\060" +
    "\uffdd\062\uffdd\001\002\000\060\016\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\062" +
    "\uffdf\001\002\000\032\004\067\005\041\006\036\007\024" +
    "\010\113\011\037\012\011\024\013\030\022\034\031\052" +
    "\062\057\044\001\002\000\050\016\076\033\105\034\075" +
    "\035\073\036\100\037\101\040\106\041\112\042\110\043" +
    "\104\044\072\045\071\046\102\047\111\050\074\051\103" +
    "\053\uffde\060\uffde\062\uffde\001\002\000\060\016\076\032" +
    "\uff79\033\105\034\075\035\073\036\100\037\101\040\106" +
    "\041\112\042\110\043\104\044\072\045\071\046\102\047" +
    "\uff79\050\uff79\051\103\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\060\uff79\062\uff79\001\002\000\060\016\076\032\uff7e\033" +
    "\105\034\075\035\073\036\100\037\101\040\106\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\060\uff7e" +
    "\062\uff7e\001\002\000\060\016\076\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\101\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\060\uff80\062\uff80" +
    "\001\002\000\060\016\076\032\uff85\033\uff85\034\uff85\035" +
    "\073\036\100\037\101\040\106\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\060\uff85\062\uff85\001\002" +
    "\000\060\016\076\032\uff7d\033\105\034\075\035\073\036" +
    "\100\037\101\040\106\041\uff7d\042\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\053\uff7d\054" +
    "\uff7d\055\uff7d\056\uff7d\060\uff7d\062\uff7d\001\002\000\060" +
    "\016\076\032\uff77\033\105\034\075\035\073\036\100\037" +
    "\101\040\106\041\112\042\110\043\104\044\072\045\071" +
    "\046\102\047\uff77\050\uff77\051\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\060\uff77\062\uff77\001\002\000\060\016\076" +
    "\032\uff7a\033\105\034\075\035\073\036\100\037\101\040" +
    "\106\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\060\uff7a\062\uff7a\001\002\000\060\016\076\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\053\uff81\054\uff81\055\uff81\056\uff81\060" +
    "\uff81\062\uff81\001\002\000\060\016\076\032\uff82\033\uff82" +
    "\034\uff82\035\uff82\036\uff82\037\101\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82" +
    "\051\uff82\053\uff82\054\uff82\055\uff82\056\uff82\060\uff82\062" +
    "\uff82\001\002\000\032\004\067\005\041\006\036\007\024" +
    "\010\113\011\037\012\011\024\013\030\022\034\031\052" +
    "\062\057\044\001\002\000\016\010\152\017\033\020\023" +
    "\021\012\022\055\023\070\001\002\000\046\016\076\033" +
    "\105\034\075\035\073\036\100\037\101\040\106\041\112" +
    "\042\110\043\104\044\072\045\071\046\102\047\111\050" +
    "\074\051\103\054\uffb3\060\uffb3\001\002\000\004\031\116" +
    "\001\002\000\006\031\116\057\153\001\002\000\034\004" +
    "\067\005\041\006\036\007\024\010\113\011\037\012\011" +
    "\024\013\030\022\034\031\052\062\057\044\060\156\001" +
    "\002\000\010\031\122\054\uffb0\060\uffb0\001\002\000\006" +
    "\053\133\060\157\001\002\000\006\054\uffb1\060\uffb1\001" +
    "\002\000\006\054\uffb2\060\uffb2\001\002\000\010\031\122" +
    "\054\uffaf\060\uffaf\001\002\000\006\053\133\062\162\001" +
    "\002\000\006\054\uffae\060\uffae\001\002\000\060\016\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\051\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\060\uff76\062\uff76\001\002\000\060\016\076\032\uff84" +
    "\033\uff84\034\uff84\035\073\036\100\037\101\040\106\041" +
    "\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\053\uff84\054\uff84\055\uff84\056\uff84\060" +
    "\uff84\062\uff84\001\002\000\060\016\076\032\uff78\033\105" +
    "\034\075\035\073\036\100\037\101\040\106\041\112\042" +
    "\110\043\104\044\072\045\071\046\102\047\111\050\uff78" +
    "\051\103\053\uff78\054\uff78\055\uff78\056\uff78\060\uff78\062" +
    "\uff78\001\002\000\060\016\076\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\101\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\060\uff83\062\uff83\001" +
    "\002\000\060\016\076\032\uff7c\033\105\034\075\035\073" +
    "\036\100\037\101\040\106\041\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\060\uff7c\062\uff7c\001\002\000" +
    "\060\016\076\032\uff7b\033\105\034\075\035\073\036\100" +
    "\037\101\040\106\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\060\uff7b\062\uff7b\001\002\000\112\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\030\uffed\034\uffed\052\uffed" +
    "\057\uffed\062\uffed\063\uffed\064\uffed\065\uffed\067\uffed\070" +
    "\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed" +
    "\077\uffed\100\uffed\101\uffed\001\002\000\004\002\001\001" +
    "\002\000\060\016\076\032\uff74\033\uff74\034\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\053\uff74" +
    "\054\uff74\055\uff74\056\uff74\060\uff74\062\uff74\001\002\000" +
    "\102\004\067\005\041\006\036\007\024\010\052\011\037" +
    "\012\011\013\032\014\043\015\034\017\033\020\023\021" +
    "\012\022\055\023\070\024\013\030\022\034\031\052\062" +
    "\057\044\063\026\064\027\065\040\067\061\070\042\071" +
    "\016\072\015\075\053\076\065\077\007\100\025\101\014" +
    "\001\002\000\102\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\032\004\067\005\041\006\036" +
    "\007\024\010\113\011\037\012\011\024\013\030\022\034" +
    "\031\052\062\057\044\001\002\000\004\060\207\001\002" +
    "\000\046\016\076\033\105\034\075\035\073\036\100\037" +
    "\101\040\106\041\112\042\110\043\104\044\072\045\071" +
    "\046\102\047\111\050\074\051\103\056\077\060\201\001" +
    "\002\000\004\061\202\001\002\000\104\004\067\005\041" +
    "\006\036\007\024\010\052\011\037\012\011\013\032\014" +
    "\043\015\034\017\033\020\023\021\012\022\055\023\070" +
    "\024\013\030\022\034\031\052\062\057\044\062\203\063" +
    "\026\064\027\065\040\067\061\070\042\071\016\072\015" +
    "\075\053\076\065\077\007\100\025\101\014\001\002\000" +
    "\112\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\030\uffaa\034\uffaa" +
    "\052\uffaa\057\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\001\002\000\104\004" +
    "\067\005\041\006\036\007\024\010\052\011\037\012\011" +
    "\013\032\014\043\015\034\017\033\020\023\021\012\022" +
    "\055\023\070\024\013\030\022\034\031\052\062\057\044" +
    "\062\206\063\026\064\027\065\040\067\061\070\042\071" +
    "\016\072\015\075\053\076\065\077\007\100\025\101\014" +
    "\001\002\000\112\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\030" +
    "\uffff\034\uffff\052\uffff\057\uffff\062\uffff\063\uffff\064\uffff" +
    "\065\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\001\002" +
    "\000\112\002\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\030\uffac\034" +
    "\uffac\052\uffac\057\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\001\002\000\004" +
    "\061\210\001\002\000\104\004\067\005\041\006\036\007" +
    "\024\010\052\011\037\012\011\013\032\014\043\015\034" +
    "\017\033\020\023\021\012\022\055\023\070\024\013\030" +
    "\022\034\031\052\062\057\044\062\211\063\026\064\027" +
    "\065\040\067\061\070\042\071\016\072\015\075\053\076" +
    "\065\077\007\100\025\101\014\001\002\000\112\002\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\030\uffab\034\uffab\052\uffab\057" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\001\002\000\104\004\067\005\041" +
    "\006\036\007\024\010\052\011\037\012\011\013\032\014" +
    "\043\015\034\017\033\020\023\021\012\022\055\023\070" +
    "\024\013\030\022\034\031\052\062\057\044\062\213\063" +
    "\026\064\027\065\040\067\061\070\042\071\016\072\015" +
    "\075\053\076\065\077\007\100\025\101\014\001\002\000" +
    "\112\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\030\uffad\034\uffad" +
    "\052\uffad\057\uffad\062\uffad\063\uffad\064\uffad\065\uffad\067" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\001\002\000\112\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\030\ufffc\034\ufffc\052\ufffc" +
    "\057\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\077\ufffc\100\ufffc\101\ufffc\001\002\000\112\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\030\ufff0\034\ufff0\052\ufff0\057\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0" +
    "\100\ufff0\101\ufff0\001\002\000\112\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\030\ufff8\034\ufff8\052\ufff8\057\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072" +
    "\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8" +
    "\101\ufff8\001\002\000\112\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\030\uffec\034\uffec\052\uffec\057\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec" +
    "\001\002\000\046\004\067\005\041\006\036\007\024\010" +
    "\315\011\037\012\011\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\060" +
    "\313\001\002\000\034\004\067\005\041\006\036\007\024" +
    "\010\113\011\037\012\011\024\013\030\022\032\262\034" +
    "\031\052\062\057\044\001\002\000\010\054\uffe8\056\270" +
    "\057\267\001\002\000\006\010\225\031\224\001\002\000" +
    "\004\032\266\001\002\000\010\054\uffe3\056\227\057\226" +
    "\001\002\000\020\010\234\017\033\020\023\021\012\022" +
    "\055\023\070\060\236\001\002\000\034\004\067\005\041" +
    "\006\036\007\024\010\113\011\037\012\011\024\013\027" +
    "\230\030\022\034\031\052\062\057\044\001\002\000\004" +
    "\010\232\001\002\000\044\016\076\033\105\034\075\035" +
    "\073\036\100\037\101\040\106\041\112\042\110\043\104" +
    "\044\072\045\071\046\102\047\111\050\074\051\103\054" +
    "\uffe4\001\002\000\004\031\116\001\002\000\006\031\122" +
    "\054\uffe5\001\002\000\006\010\263\031\256\001\002\000" +
    "\006\010\257\031\256\001\002\000\004\061\252\001\002" +
    "\000\006\053\241\060\240\001\002\000\004\061\246\001" +
    "\002\000\016\010\243\017\033\020\023\021\012\022\055" +
    "\023\070\001\002\000\004\010\245\001\002\000\004\010" +
    "\244\001\002\000\006\053\uffc3\060\uffc3\001\002\000\006" +
    "\053\uffc4\060\uffc4\001\002\000\104\004\067\005\041\006" +
    "\036\007\024\010\052\011\037\012\011\013\032\014\043" +
    "\015\034\017\033\020\023\021\012\022\055\023\070\024" +
    "\013\030\022\034\031\052\062\057\044\062\247\063\026" +
    "\064\027\065\040\067\061\070\042\071\016\072\015\075" +
    "\053\076\065\077\007\100\025\101\014\001\002\000\112" +
    "\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\030\uffc6\034\uffc6\052" +
    "\uffc6\057\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\001\002\000\104\004\067" +
    "\005\041\006\036\007\024\010\052\011\037\012\011\013" +
    "\032\014\043\015\034\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\062" +
    "\251\063\026\064\027\065\040\067\061\070\042\071\016" +
    "\072\015\075\053\076\065\077\007\100\025\101\014\001" +
    "\002\000\112\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5" +
    "\034\uffc5\052\uffc5\057\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\001\002\000" +
    "\104\004\067\005\041\006\036\007\024\010\052\011\037" +
    "\012\011\013\032\014\043\015\034\017\033\020\023\021" +
    "\012\022\055\023\070\024\013\030\022\034\031\052\062" +
    "\057\044\062\253\063\026\064\027\065\040\067\061\070" +
    "\042\071\016\072\015\075\053\076\065\077\007\100\025" +
    "\101\014\001\002\000\112\002\uffc8\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\030\uffc8\034\uffc8\052\uffc8\057\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\104\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\062\255\063\026\064\027\065\040" +
    "\067\061\070\042\071\016\072\015\075\053\076\065\077" +
    "\007\100\025\101\014\001\002\000\112\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\030\uffc7\034\uffc7\052\uffc7\057\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\001\002\000\004\032\262\001\002\000\006" +
    "\053\uffc2\060\uffc2\001\002\000\006\010\261\031\224\001" +
    "\002\000\006\053\uffc0\060\uffc0\001\002\000\006\010\uffb6" +
    "\031\uffb6\001\002\000\006\053\uffc1\060\uffc1\001\002\000" +
    "\006\010\265\031\224\001\002\000\006\053\uffbf\060\uffbf" +
    "\001\002\000\006\010\uffb7\031\uffb7\001\002\000\020\010" +
    "\234\017\033\020\023\021\012\022\055\023\070\060\300" +
    "\001\002\000\034\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\027\271\030\022\034\031" +
    "\052\062\057\044\001\002\000\004\010\273\001\002\000" +
    "\044\016\076\033\105\034\075\035\073\036\100\037\101" +
    "\040\106\041\112\042\110\043\104\044\072\045\071\046" +
    "\102\047\111\050\074\051\103\054\uffe6\001\002\000\004" +
    "\057\274\001\002\000\034\004\067\005\041\006\036\007" +
    "\024\010\113\011\037\012\011\024\013\030\022\034\031" +
    "\052\062\057\044\060\276\001\002\000\006\053\133\060" +
    "\277\001\002\000\004\054\uffe9\001\002\000\004\054\uffe7" +
    "\001\002\000\004\061\307\001\002\000\006\053\241\060" +
    "\302\001\002\000\004\061\303\001\002\000\104\004\067" +
    "\005\041\006\036\007\024\010\052\011\037\012\011\013" +
    "\032\014\043\015\034\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\062" +
    "\304\063\026\064\027\065\040\067\061\070\042\071\016" +
    "\072\015\075\053\076\065\077\007\100\025\101\014\001" +
    "\002\000\112\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\030\uffce" +
    "\034\uffce\052\uffce\057\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce" +
    "\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\001\002\000" +
    "\104\004\067\005\041\006\036\007\024\010\052\011\037" +
    "\012\011\013\032\014\043\015\034\017\033\020\023\021" +
    "\012\022\055\023\070\024\013\030\022\034\031\052\062" +
    "\057\044\062\306\063\026\064\027\065\040\067\061\070" +
    "\042\071\016\072\015\075\053\076\065\077\007\100\025" +
    "\101\014\001\002\000\112\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\030\uffcd\034\uffcd\052\uffcd\057\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\001\002\000\104\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\062\310\063\026\064\027\065\040" +
    "\067\061\070\042\071\016\072\015\075\053\076\065\077" +
    "\007\100\025\101\014\001\002\000\112\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\030\uffd0\034\uffd0\052\uffd0\057\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\001\002\000\104\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\312\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\075\053" +
    "\076\065\077\007\100\025\101\014\001\002\000\112\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\030\uffcf\034\uffcf\052\uffcf" +
    "\057\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\001\002\000\050\016\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\054\uffe0\056\uffe0\061\323\001\002\000\006" +
    "\053\241\060\316\001\002\000\060\010\263\016\uff6a\025" +
    "\121\026\117\031\221\033\uff6a\034\uff6a\035\uff6a\036\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045" +
    "\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\053\uff6a\057\115" +
    "\060\uff6a\001\002\000\004\061\317\001\002\000\104\004" +
    "\067\005\041\006\036\007\024\010\052\011\037\012\011" +
    "\013\032\014\043\015\034\017\033\020\023\021\012\022" +
    "\055\023\070\024\013\030\022\034\031\052\062\057\044" +
    "\062\320\063\026\064\027\065\040\067\061\070\042\071" +
    "\016\072\015\075\053\076\065\077\007\100\025\101\014" +
    "\001\002\000\112\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\030" +
    "\uffd6\034\uffd6\052\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\001\002" +
    "\000\104\004\067\005\041\006\036\007\024\010\052\011" +
    "\037\012\011\013\032\014\043\015\034\017\033\020\023" +
    "\021\012\022\055\023\070\024\013\030\022\034\031\052" +
    "\062\057\044\062\322\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\112\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\030\uffd5\034\uffd5\052\uffd5\057\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\001\002\000\104\004\067\005\041\006\036\007\024" +
    "\010\052\011\037\012\011\013\032\014\043\015\034\017" +
    "\033\020\023\021\012\022\055\023\070\024\013\030\022" +
    "\034\031\052\062\057\044\062\324\063\026\064\027\065" +
    "\040\067\061\070\042\071\016\072\015\075\053\076\065" +
    "\077\007\100\025\101\014\001\002\000\112\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\030\uffd8\034\uffd8\052\uffd8\057\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\001\002\000\104\004\067\005\041\006" +
    "\036\007\024\010\052\011\037\012\011\013\032\014\043" +
    "\015\034\017\033\020\023\021\012\022\055\023\070\024" +
    "\013\030\022\034\031\052\062\057\044\062\326\063\026" +
    "\064\027\065\040\067\061\070\042\071\016\072\015\075" +
    "\053\076\065\077\007\100\025\101\014\001\002\000\112" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7\034\uffd7\052" +
    "\uffd7\057\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\001\002\000\112\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\030\ufffa\034\ufffa\052\ufffa\057" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa" +
    "\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\100\ufffa\101\ufffa\001\002\000\112\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\030\ufff7\034\ufff7\052\ufff7\057\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\001\002\000\112\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\030\ufff9\034\ufff9\052\ufff9\057\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\001\002\000\044\016\076\033\105\034\075\035\073" +
    "\036\100\037\101\040\106\041\112\042\110\043\104\044" +
    "\072\045\071\046\102\047\111\050\074\051\103\060\333" +
    "\001\002\000\060\016\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\053" +
    "\uff72\054\uff72\055\uff72\056\uff72\060\uff72\062\uff72\001\002" +
    "\000\112\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\030\uffeb\034" +
    "\uffeb\052\uffeb\057\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\001\002\000\044" +
    "\016\076\033\105\034\075\035\073\036\100\037\101\040" +
    "\106\041\112\042\110\043\104\044\072\045\071\046\102" +
    "\047\111\050\074\051\103\054\336\001\002\000\112\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\030\uffea\034\uffea\052\uffea" +
    "\057\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\001\002\000\032\004\067\005" +
    "\041\006\036\007\024\010\113\011\037\012\011\024\013" +
    "\030\022\034\031\052\062\057\044\001\002\000\044\016" +
    "\076\033\105\034\075\035\073\036\100\037\101\040\106" +
    "\041\112\042\110\043\104\044\072\045\071\046\102\047" +
    "\111\050\074\051\103\060\341\001\002\000\004\061\342" +
    "\001\002\000\104\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\062\343\063\026\064\027\065\040" +
    "\067\061\070\042\071\016\072\015\075\053\076\065\077" +
    "\007\100\025\101\014\001\002\000\112\002\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\030\uffa6\034\uffa6\052\uffa6\057\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\101\uffa6\001\002\000\104\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\345\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\075\053" +
    "\076\065\077\007\100\025\101\014\001\002\000\112\002" +
    "\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\030\uffa7\034\uffa7\052\uffa7" +
    "\057\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\101\uffa7\001\002\000\032\004\067\005" +
    "\041\006\036\007\024\010\113\011\037\012\011\024\013" +
    "\030\022\034\031\052\062\057\044\001\002\000\044\016" +
    "\076\033\105\034\075\035\073\036\100\037\101\040\106" +
    "\041\112\042\110\043\104\044\072\045\071\046\102\047" +
    "\111\050\074\051\103\060\350\001\002\000\004\061\351" +
    "\001\002\000\104\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\062\352\063\026\064\027\065\040" +
    "\067\061\070\042\071\016\072\015\075\053\076\065\077" +
    "\007\100\025\101\014\001\002\000\114\002\uffa4\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\030\uffa4\034\uffa4\052\uffa4\057\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\356\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\100\uffa4\101\uffa4\001\002\000\104\004\067\005\041" +
    "\006\036\007\024\010\052\011\037\012\011\013\032\014" +
    "\043\015\034\017\033\020\023\021\012\022\055\023\070" +
    "\024\013\030\022\034\031\052\062\057\044\062\354\063" +
    "\026\064\027\065\040\067\061\070\042\071\016\072\015" +
    "\075\053\076\065\077\007\100\025\101\014\001\002\000" +
    "\114\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\030\uffa5\034\uffa5" +
    "\052\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\356\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\001\002\000" +
    "\112\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\030\uffa3\034\uffa3" +
    "\052\uffa3\057\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\101\uffa3\001\002\000\006\061" +
    "\362\065\376\001\002\000\114\002\uffa1\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\030\uffa1\034\uffa1\052\uffa1\057\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\361\067\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\001\002\000\112\002\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\030\uff9f\034\uff9f\052\uff9f\057\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\001\002\000\006\061\362\065\363\001\002\000\104" +
    "\004\067\005\041\006\036\007\024\010\052\011\037\012" +
    "\011\013\032\014\043\015\034\017\033\020\023\021\012" +
    "\022\055\023\070\024\013\030\022\034\031\052\062\057" +
    "\044\062\373\063\026\064\027\065\040\067\061\070\042" +
    "\071\016\072\015\075\053\076\065\077\007\100\025\101" +
    "\014\001\002\000\004\057\364\001\002\000\032\004\067" +
    "\005\041\006\036\007\024\010\113\011\037\012\011\024" +
    "\013\030\022\034\031\052\062\057\044\001\002\000\044" +
    "\016\076\033\105\034\075\035\073\036\100\037\101\040" +
    "\106\041\112\042\110\043\104\044\072\045\071\046\102" +
    "\047\111\050\074\051\103\060\366\001\002\000\004\061" +
    "\367\001\002\000\104\004\067\005\041\006\036\007\024" +
    "\010\052\011\037\012\011\013\032\014\043\015\034\017" +
    "\033\020\023\021\012\022\055\023\070\024\013\030\022" +
    "\034\031\052\062\057\044\062\370\063\026\064\027\065" +
    "\040\067\061\070\042\071\016\072\015\075\053\076\065" +
    "\077\007\100\025\101\014\001\002\000\114\002\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\030\uff9c\034\uff9c\052\uff9c\057\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\077\uff9c\100\uff9c\101\uff9c\001\002\000\104\004\067\005" +
    "\041\006\036\007\024\010\052\011\037\012\011\013\032" +
    "\014\043\015\034\017\033\020\023\021\012\022\055\023" +
    "\070\024\013\030\022\034\031\052\062\057\044\062\372" +
    "\063\026\064\027\065\040\067\061\070\042\071\016\072" +
    "\015\075\053\076\065\077\007\100\025\101\014\001\002" +
    "\000\114\002\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\030\uff9d\034" +
    "\uff9d\052\uff9d\057\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\001\002" +
    "\000\112\002\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\030\uff98\034" +
    "\uff98\052\uff98\057\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\100\uff98\101\uff98\001\002\000\104" +
    "\004\067\005\041\006\036\007\024\010\052\011\037\012" +
    "\011\013\032\014\043\015\034\017\033\020\023\021\012" +
    "\022\055\023\070\024\013\030\022\034\031\052\062\057" +
    "\044\062\375\063\026\064\027\065\040\067\061\070\042" +
    "\071\016\072\015\075\053\076\065\077\007\100\025\101" +
    "\014\001\002\000\112\002\uff99\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\030\uff99\034\uff99\052\uff99\057\uff99\062\uff99\063\uff99\064" +
    "\uff99\065\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\001" +
    "\002\000\004\057\377\001\002\000\032\004\067\005\041" +
    "\006\036\007\024\010\113\011\037\012\011\024\013\030" +
    "\022\034\031\052\062\057\044\001\002\000\044\016\076" +
    "\033\105\034\075\035\073\036\100\037\101\040\106\041" +
    "\112\042\110\043\104\044\072\045\071\046\102\047\111" +
    "\050\074\051\103\060\u0101\001\002\000\004\061\u0102\001" +
    "\002\000\104\004\067\005\041\006\036\007\024\010\052" +
    "\011\037\012\011\013\032\014\043\015\034\017\033\020" +
    "\023\021\012\022\055\023\070\024\013\030\022\034\031" +
    "\052\062\057\044\062\u0103\063\026\064\027\065\040\067" +
    "\061\070\042\071\016\072\015\075\053\076\065\077\007" +
    "\100\025\101\014\001\002\000\114\002\uff9a\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\030\uff9a\034\uff9a\052\uff9a\057\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\001\002\000\104\004\067\005\041\006" +
    "\036\007\024\010\052\011\037\012\011\013\032\014\043" +
    "\015\034\017\033\020\023\021\012\022\055\023\070\024" +
    "\013\030\022\034\031\052\062\057\044\062\u0105\063\026" +
    "\064\027\065\040\067\061\070\042\071\016\072\015\075" +
    "\053\076\065\077\007\100\025\101\014\001\002\000\114" +
    "\002\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\030\uff9b\034\uff9b\052" +
    "\uff9b\057\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\001\002\000\112" +
    "\002\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\030\uffa2\034\uffa2\052" +
    "\uffa2\057\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\001\002\000\114\002\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\030\uffa0\034\uffa0\052\uffa0\057" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\361\067\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\001\002\000\112\002\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\030\uff9e\034\uff9e\052\uff9e\057" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077" +
    "\uff9e\100\uff9e\101\uff9e\001\002\000\004\061\u010a\001\002" +
    "\000\104\004\067\005\041\006\036\007\024\010\052\011" +
    "\037\012\011\013\032\014\043\015\034\017\033\020\023" +
    "\021\012\022\055\023\070\024\013\030\022\034\031\052" +
    "\062\057\044\062\u010b\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\112\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\030\uffe1\034\uffe1\052\uffe1\057\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101" +
    "\uffe1\001\002\000\104\004\067\005\041\006\036\007\024" +
    "\010\052\011\037\012\011\013\032\014\043\015\034\017" +
    "\033\020\023\021\012\022\055\023\070\024\013\030\022" +
    "\034\031\052\062\057\044\062\u010d\063\026\064\027\065" +
    "\040\067\061\070\042\071\016\072\015\075\053\076\065" +
    "\077\007\100\025\101\014\001\002\000\112\002\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\030\uffe2\034\uffe2\052\uffe2\057\uffe2" +
    "\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\001\002\000\004\057\u010f\001\002\000" +
    "\020\010\234\017\033\020\023\021\012\022\055\023\070" +
    "\060\u0110\001\002\000\004\061\u0117\001\002\000\006\053" +
    "\241\060\u0112\001\002\000\004\061\u0113\001\002\000\104" +
    "\004\067\005\041\006\036\007\024\010\052\011\037\012" +
    "\011\013\032\014\043\015\034\017\033\020\023\021\012" +
    "\022\055\023\070\024\013\030\022\034\031\052\062\057" +
    "\044\062\u0114\063\026\064\027\065\040\067\061\070\042" +
    "\071\016\072\015\075\053\076\065\077\007\100\025\101" +
    "\014\001\002\000\112\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\030\uffda\034\uffda\052\uffda\057\uffda\062\uffda\063\uffda\064" +
    "\uffda\065\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\001" +
    "\002\000\104\004\067\005\041\006\036\007\024\010\052" +
    "\011\037\012\011\013\032\014\043\015\034\017\033\020" +
    "\023\021\012\022\055\023\070\024\013\030\022\034\031" +
    "\052\062\057\044\062\u0116\063\026\064\027\065\040\067" +
    "\061\070\042\071\016\072\015\075\053\076\065\077\007" +
    "\100\025\101\014\001\002\000\112\002\uffd9\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\030\uffd9\034\uffd9\052\uffd9\057\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\067\uffd9\070\uffd9\071\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9" +
    "\101\uffd9\001\002\000\104\004\067\005\041\006\036\007" +
    "\024\010\052\011\037\012\011\013\032\014\043\015\034" +
    "\017\033\020\023\021\012\022\055\023\070\024\013\030" +
    "\022\034\031\052\062\057\044\062\u0118\063\026\064\027" +
    "\065\040\067\061\070\042\071\016\072\015\075\053\076" +
    "\065\077\007\100\025\101\014\001\002\000\112\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\030\uffdc\034\uffdc\052\uffdc\057" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\101\uffdc\001\002\000\104\004\067\005\041" +
    "\006\036\007\024\010\052\011\037\012\011\013\032\014" +
    "\043\015\034\017\033\020\023\021\012\022\055\023\070" +
    "\024\013\030\022\034\031\052\062\057\044\062\u011a\063" +
    "\026\064\027\065\040\067\061\070\042\071\016\072\015" +
    "\075\053\076\065\077\007\100\025\101\014\001\002\000" +
    "\112\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\030\uffdb\034\uffdb" +
    "\052\uffdb\057\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\067" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb" +
    "\076\uffdb\077\uffdb\100\uffdb\101\uffdb\001\002\000\060\016" +
    "\076\032\uff73\033\uff73\034\uff73\035\073\036\100\037\101" +
    "\040\106\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046" +
    "\uff73\047\uff73\050\uff73\051\uff73\053\uff73\054\uff73\055\uff73" +
    "\056\uff73\060\uff73\062\uff73\001\002\000\004\060\u011d\001" +
    "\002\000\004\054\uff8b\001\002\000\044\016\076\033\105" +
    "\034\075\035\073\036\100\037\101\040\106\041\112\042" +
    "\110\043\104\044\072\045\071\046\102\047\111\050\074" +
    "\051\103\054\uffbe\001\002\000\032\004\067\005\041\006" +
    "\036\007\024\010\113\011\037\012\011\024\013\030\022" +
    "\034\031\052\062\057\044\001\002\000\044\016\076\033" +
    "\105\034\075\035\073\036\100\037\101\040\106\041\112" +
    "\042\110\043\104\044\072\045\071\046\102\047\111\050" +
    "\074\051\103\060\u0121\001\002\000\004\054\uff8e\001\002" +
    "\000\032\004\067\005\041\006\036\007\024\010\113\011" +
    "\037\012\011\024\013\030\022\034\031\052\062\057\044" +
    "\001\002\000\060\016\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\053" +
    "\uff75\054\uff75\055\uff75\056\uff75\060\uff75\062\uff75\001\002" +
    "\000\104\004\067\005\041\006\036\007\024\010\052\011" +
    "\037\012\011\013\032\014\043\015\034\017\033\020\023" +
    "\021\012\022\055\023\070\024\013\030\022\034\031\052" +
    "\062\057\044\062\u0125\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\004\070\u012c\001\002\000\104" +
    "\004\067\005\041\006\036\007\024\010\052\011\037\012" +
    "\011\013\032\014\043\015\034\017\033\020\023\021\012" +
    "\022\055\023\070\024\013\030\022\034\031\052\062\057" +
    "\044\062\u0127\063\026\064\027\065\040\067\061\070\042" +
    "\071\016\072\015\075\053\076\065\077\007\100\025\101" +
    "\014\001\002\000\004\070\u0128\001\002\000\004\057\u0129" +
    "\001\002\000\032\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\030\022\034\031\052\062" +
    "\057\044\001\002\000\044\016\076\033\105\034\075\035" +
    "\073\036\100\037\101\040\106\041\112\042\110\043\104" +
    "\044\072\045\071\046\102\047\111\050\074\051\103\060" +
    "\u012b\001\002\000\004\054\uffa9\001\002\000\004\057\u012d" +
    "\001\002\000\032\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\030\022\034\031\052\062" +
    "\057\044\001\002\000\044\016\076\033\105\034\075\035" +
    "\073\036\100\037\101\040\106\041\112\042\110\043\104" +
    "\044\072\045\071\046\102\047\111\050\074\051\103\060" +
    "\u012f\001\002\000\004\054\uffa8\001\002\000\032\004\067" +
    "\005\041\006\036\007\024\010\113\011\037\012\011\024" +
    "\013\030\022\034\031\052\062\057\044\001\002\000\044" +
    "\016\076\033\105\034\075\035\073\036\100\037\101\040" +
    "\106\041\112\042\110\043\104\044\072\045\071\046\102" +
    "\047\111\050\074\051\103\060\u0132\001\002\000\004\061" +
    "\u0133\001\002\000\006\073\u0134\074\u0135\001\002\000\032" +
    "\004\067\005\041\006\036\007\024\010\113\011\037\012" +
    "\011\024\013\030\022\034\031\052\062\057\044\001\002" +
    "\000\004\055\u013f\001\002\000\010\062\u0137\073\u0138\074" +
    "\u0139\001\002\000\112\002\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\030\uff97\034\uff97\052\uff97\057\uff97\062\uff97\063\uff97\064" +
    "\uff97\065\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\001" +
    "\002\000\032\004\067\005\041\006\036\007\024\010\113" +
    "\011\037\012\011\024\013\030\022\034\031\052\062\057" +
    "\044\001\002\000\004\055\u013a\001\002\000\110\004\067" +
    "\005\041\006\036\007\024\010\052\011\037\012\011\013" +
    "\032\014\043\015\034\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\062" +
    "\uff93\063\026\064\027\065\040\067\061\070\042\071\016" +
    "\072\015\073\uff93\074\uff93\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\110\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\uff94\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\073\uff94" +
    "\074\uff94\075\053\076\065\077\007\100\025\101\014\001" +
    "\002\000\044\016\076\033\105\034\075\035\073\036\100" +
    "\037\101\040\106\041\112\042\110\043\104\044\072\045" +
    "\071\046\102\047\111\050\074\051\103\055\u013d\001\002" +
    "\000\110\004\067\005\041\006\036\007\024\010\052\011" +
    "\037\012\011\013\032\014\043\015\034\017\033\020\023" +
    "\021\012\022\055\023\070\024\013\030\022\034\031\052" +
    "\062\057\044\062\uff95\063\026\064\027\065\040\067\061" +
    "\070\042\071\016\072\015\073\uff95\074\uff95\075\053\076" +
    "\065\077\007\100\025\101\014\001\002\000\110\004\067" +
    "\005\041\006\036\007\024\010\052\011\037\012\011\013" +
    "\032\014\043\015\034\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\062" +
    "\uff96\063\026\064\027\065\040\067\061\070\042\071\016" +
    "\072\015\073\uff96\074\uff96\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\110\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\uff8f\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\073\uff8f" +
    "\074\uff8f\075\053\076\065\077\007\100\025\101\014\001" +
    "\002\000\110\004\067\005\041\006\036\007\024\010\052" +
    "\011\037\012\011\013\032\014\043\015\034\017\033\020" +
    "\023\021\012\022\055\023\070\024\013\030\022\034\031" +
    "\052\062\057\044\062\uff90\063\026\064\027\065\040\067" +
    "\061\070\042\071\016\072\015\073\uff90\074\uff90\075\053" +
    "\076\065\077\007\100\025\101\014\001\002\000\044\016" +
    "\076\033\105\034\075\035\073\036\100\037\101\040\106" +
    "\041\112\042\110\043\104\044\072\045\071\046\102\047" +
    "\111\050\074\051\103\055\u0142\001\002\000\110\004\067" +
    "\005\041\006\036\007\024\010\052\011\037\012\011\013" +
    "\032\014\043\015\034\017\033\020\023\021\012\022\055" +
    "\023\070\024\013\030\022\034\031\052\062\057\044\062" +
    "\uff91\063\026\064\027\065\040\067\061\070\042\071\016" +
    "\072\015\073\uff91\074\uff91\075\053\076\065\077\007\100" +
    "\025\101\014\001\002\000\110\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\uff92\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\073\uff92" +
    "\074\uff92\075\053\076\065\077\007\100\025\101\014\001" +
    "\002\000\032\004\067\005\041\006\036\007\024\010\113" +
    "\011\037\012\011\024\013\030\022\034\031\052\062\057" +
    "\044\001\002\000\044\016\076\033\105\034\075\035\073" +
    "\036\100\037\101\040\106\041\112\042\110\043\104\044" +
    "\072\045\071\046\102\047\111\050\074\051\103\053\u0146" +
    "\001\002\000\032\004\067\005\041\006\036\007\024\010" +
    "\113\011\037\012\011\024\013\030\022\034\031\052\062" +
    "\057\044\001\002\000\044\016\076\033\105\034\075\035" +
    "\073\036\100\037\101\040\106\041\112\042\110\043\104" +
    "\044\072\045\071\046\102\047\111\050\074\051\103\060" +
    "\u0148\001\002\000\004\054\uff8c\001\002\000\112\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\030\ufffd\034\ufffd\052\ufffd\057" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077" +
    "\ufffd\100\ufffd\101\ufffd\001\002\000\032\004\067\005\041" +
    "\006\036\007\024\010\113\011\037\012\011\024\013\030" +
    "\022\034\031\052\062\057\044\001\002\000\044\016\076" +
    "\033\105\034\075\035\073\036\100\037\101\040\106\041" +
    "\112\042\110\043\104\044\072\045\071\046\102\047\111" +
    "\050\074\051\103\060\u014c\001\002\000\004\054\uff8d\001" +
    "\002\000\010\054\uffbc\056\u0165\057\u0164\001\002\000\006" +
    "\010\u014f\031\224\001\002\000\010\054\uffb8\056\u0151\057" +
    "\u0150\001\002\000\020\010\234\017\033\020\023\021\012" +
    "\022\055\023\070\060\u0159\001\002\000\036\004\067\005" +
    "\041\006\036\007\024\010\113\011\037\012\011\024\013" +
    "\027\u0153\030\022\034\031\052\062\057\044\061\u0152\001" +
    "\002\000\032\004\067\005\041\006\036\007\024\010\113" +
    "\011\037\012\011\024\013\030\022\034\031\052\062\057" +
    "\044\001\002\000\014\017\033\020\023\021\012\022\055" +
    "\023\070\001\002\000\044\016\076\033\105\034\075\035" +
    "\073\036\100\037\101\040\106\041\112\042\110\043\104" +
    "\044\072\045\071\046\102\047\111\050\074\051\103\054" +
    "\uffb9\001\002\000\004\031\116\001\002\000\006\031\122" +
    "\054\uffba\001\002\000\006\053\133\062\u0158\001\002\000" +
    "\004\054\uffbb\001\002\000\004\061\u0160\001\002\000\006" +
    "\053\241\060\u015b\001\002\000\004\061\u015c\001\002\000" +
    "\104\004\067\005\041\006\036\007\024\010\052\011\037" +
    "\012\011\013\032\014\043\015\034\017\033\020\023\021" +
    "\012\022\055\023\070\024\013\030\022\034\031\052\062" +
    "\057\044\062\u015d\063\026\064\027\065\040\067\061\070" +
    "\042\071\016\072\015\075\053\076\065\077\007\100\025" +
    "\101\014\001\002\000\112\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\030\uffca\034\uffca\052\uffca\057\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\001\002\000\104\004\067\005\041\006\036\007\024\010" +
    "\052\011\037\012\011\013\032\014\043\015\034\017\033" +
    "\020\023\021\012\022\055\023\070\024\013\030\022\034" +
    "\031\052\062\057\044\062\u015f\063\026\064\027\065\040" +
    "\067\061\070\042\071\016\072\015\075\053\076\065\077" +
    "\007\100\025\101\014\001\002\000\112\002\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\030\uffc9\034\uffc9\052\uffc9\057\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\001\002\000\104\004\067\005\041\006\036" +
    "\007\024\010\052\011\037\012\011\013\032\014\043\015" +
    "\034\017\033\020\023\021\012\022\055\023\070\024\013" +
    "\030\022\034\031\052\062\057\044\062\u0161\063\026\064" +
    "\027\065\040\067\061\070\042\071\016\072\015\075\053" +
    "\076\065\077\007\100\025\101\014\001\002\000\112\002" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\030\uffcc\034\uffcc\052\uffcc" +
    "\057\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\101\uffcc\001\002\000\104\004\067\005" +
    "\041\006\036\007\024\010\052\011\037\012\011\013\032" +
    "\014\043\015\034\017\033\020\023\021\012\022\055\023" +
    "\070\024\013\030\022\034\031\052\062\057\044\062\u0163" +
    "\063\026\064\027\065\040\067\061\070\042\071\016\072" +
    "\015\075\053\076\065\077\007\100\025\101\014\001\002" +
    "\000\112\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\030\uffcb\034" +
    "\uffcb\052\uffcb\057\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000\020" +
    "\010\234\017\033\020\023\021\012\022\055\023\070\060" +
    "\u0167\001\002\000\032\004\067\005\041\006\036\007\024" +
    "\010\113\011\037\012\011\024\013\030\022\034\031\052" +
    "\062\057\044\001\002\000\044\016\076\033\105\034\075" +
    "\035\073\036\100\037\101\040\106\041\112\042\110\043" +
    "\104\044\072\045\071\046\102\047\111\050\074\051\103" +
    "\054\uffbd\001\002\000\004\061\u016e\001\002\000\006\053" +
    "\241\060\u0169\001\002\000\004\061\u016a\001\002\000\104" +
    "\004\067\005\041\006\036\007\024\010\052\011\037\012" +
    "\011\013\032\014\043\015\034\017\033\020\023\021\012" +
    "\022\055\023\070\024\013\030\022\034\031\052\062\057" +
    "\044\062\u016b\063\026\064\027\065\040\067\061\070\042" +
    "\071\016\072\015\075\053\076\065\077\007\100\025\101" +
    "\014\001\002\000\112\002\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\030\uffd2\034\uffd2\052\uffd2\057\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\001" +
    "\002\000\104\004\067\005\041\006\036\007\024\010\052" +
    "\011\037\012\011\013\032\014\043\015\034\017\033\020" +
    "\023\021\012\022\055\023\070\024\013\030\022\034\031" +
    "\052\062\057\044\062\u016d\063\026\064\027\065\040\067" +
    "\061\070\042\071\016\072\015\075\053\076\065\077\007" +
    "\100\025\101\014\001\002\000\112\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\030\uffd1\034\uffd1\052\uffd1\057\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\001\002\000\104\004\067\005\041\006\036\007" +
    "\024\010\052\011\037\012\011\013\032\014\043\015\034" +
    "\017\033\020\023\021\012\022\055\023\070\024\013\030" +
    "\022\034\031\052\062\057\044\062\u016f\063\026\064\027" +
    "\065\040\067\061\070\042\071\016\072\015\075\053\076" +
    "\065\077\007\100\025\101\014\001\002\000\112\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\030\uffd4\034\uffd4\052\uffd4\057" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\001\002\000\104\004\067\005\041" +
    "\006\036\007\024\010\052\011\037\012\011\013\032\014" +
    "\043\015\034\017\033\020\023\021\012\022\055\023\070" +
    "\024\013\030\022\034\031\052\062\057\044\062\u0171\063" +
    "\026\064\027\065\040\067\061\070\042\071\016\072\015" +
    "\075\053\076\065\077\007\100\025\101\014\001\002\000" +
    "\112\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\030\uffd3\034\uffd3" +
    "\052\uffd3\057\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\067" +
    "\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002\000\112\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\030\ufffb\034\ufffb\052\ufffb" +
    "\057\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\100\ufffb\101\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\054\002\063\003\020\012\016\013\065\014" +
    "\007\015\057\016\003\017\050\020\045\021\027\022\017" +
    "\023\056\024\053\025\046\026\047\027\044\030\004\031" +
    "\005\032\062\033\034\034\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\012\204\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u011d\032\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u011a\032\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\334\032\062\001\001\000\006\013\331\032\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\117" +
    "\035\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\172\032\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\167\032\062\001\001\000\006\013\166\032\062" +
    "\001\001\000\006\013\165\032\062\001\001\000\006\013" +
    "\164\032\062\001\001\000\006\013\163\032\062\001\001" +
    "\000\006\013\162\032\062\001\001\000\006\013\147\032" +
    "\062\001\001\000\006\013\144\032\062\001\001\000\006" +
    "\013\143\032\062\001\001\000\006\013\142\032\062\001" +
    "\001\000\006\013\141\032\062\001\001\000\006\013\140" +
    "\032\062\001\001\000\006\013\137\032\062\001\001\000" +
    "\006\013\136\032\062\001\001\000\002\001\001\000\006" +
    "\013\135\032\062\001\001\000\006\013\134\032\062\001" +
    "\001\000\006\013\113\032\062\001\001\000\004\007\117" +
    "\001\001\000\002\001\001\000\010\006\126\013\130\032" +
    "\062\001\001\000\006\013\124\032\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\122\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\133\032\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\160\013\130" +
    "\032\062\001\001\000\004\031\150\001\001\000\002\001" +
    "\001\000\004\007\157\001\001\000\004\007\153\001\001" +
    "\000\010\006\154\013\130\032\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\012\174" +
    "\013\065\014\007\015\057\016\003\017\050\020\045\021" +
    "\027\022\017\023\056\024\053\025\046\026\047\027\044" +
    "\030\004\031\005\032\062\033\034\034\055\001\001\000" +
    "\050\012\175\013\065\014\007\015\057\016\003\017\050" +
    "\020\045\021\027\022\017\023\056\024\053\025\046\026" +
    "\047\027\044\030\004\031\005\032\062\033\034\034\055" +
    "\001\001\000\010\013\177\020\176\032\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\203\012\016\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\002\001\001\000\050\012\204\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\211" +
    "\012\016\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\002\001\001\000\050\012\204\013\065\014\007" +
    "\015\057\016\003\017\050\020\045\021\027\022\017\023" +
    "\056\024\053\025\046\026\047\027\044\030\004\031\005" +
    "\032\062\033\034\034\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\313\006\126\013\130\031\234\032" +
    "\062\001\001\000\006\013\124\032\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\236\031\234\001\001\000\006\013\230" +
    "\032\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\232\001\001\000\002\001\001\000\004\035\263" +
    "\001\001\000\004\035\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\247\012\016\013\065\014\007" +
    "\015\057\016\003\017\050\020\045\021\027\022\017\023" +
    "\056\024\053\025\046\026\047\027\044\030\004\031\005" +
    "\032\062\033\034\034\055\001\001\000\002\001\001\000" +
    "\050\012\204\013\065\014\007\015\057\016\003\017\050" +
    "\020\045\021\027\022\017\023\056\024\053\025\046\026" +
    "\047\027\044\030\004\031\005\032\062\033\034\034\055" +
    "\001\001\000\002\001\001\000\052\003\253\012\016\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\050\012\204\013\065\014\007\015\057\016" +
    "\003\017\050\020\045\021\027\022\017\023\056\024\053" +
    "\025\046\026\047\027\044\030\004\031\005\032\062\033" +
    "\034\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\300\031\234\001" +
    "\001\000\006\013\271\032\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\274\013" +
    "\130\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\304\012\016\013\065\014\007" +
    "\015\057\016\003\017\050\020\045\021\027\022\017\023" +
    "\056\024\053\025\046\026\047\027\044\030\004\031\005" +
    "\032\062\033\034\034\055\001\001\000\002\001\001\000" +
    "\050\012\204\013\065\014\007\015\057\016\003\017\050" +
    "\020\045\021\027\022\017\023\056\024\053\025\046\026" +
    "\047\027\044\030\004\031\005\032\062\033\034\034\055" +
    "\001\001\000\002\001\001\000\052\003\310\012\016\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\050\012\204\013\065\014\007\015\057\016" +
    "\003\017\050\020\045\021\027\022\017\023\056\024\053" +
    "\025\046\026\047\027\044\030\004\031\005\032\062\033" +
    "\034\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\117\035\263\001\001\000" +
    "\002\001\001\000\052\003\320\012\016\013\065\014\007" +
    "\015\057\016\003\017\050\020\045\021\027\022\017\023" +
    "\056\024\053\025\046\026\047\027\044\030\004\031\005" +
    "\032\062\033\034\034\055\001\001\000\002\001\001\000" +
    "\050\012\204\013\065\014\007\015\057\016\003\017\050" +
    "\020\045\021\027\022\017\023\056\024\053\025\046\026" +
    "\047\027\044\030\004\031\005\032\062\033\034\034\055" +
    "\001\001\000\002\001\001\000\052\003\324\012\016\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\050\012\204\013\065\014\007\015\057\016" +
    "\003\017\050\020\045\021\027\022\017\023\056\024\053" +
    "\025\046\026\047\027\044\030\004\031\005\032\062\033" +
    "\034\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\337\032\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\343\012\016\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\002\001" +
    "\001\000\050\012\204\013\065\014\007\015\057\016\003" +
    "\017\050\020\045\021\027\022\017\023\056\024\053\025" +
    "\046\026\047\027\044\030\004\031\005\032\062\033\034" +
    "\034\055\001\001\000\002\001\001\000\006\013\346\032" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\352\012\016\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\006\004\u0105\010\u0106\001\001\000\050" +
    "\012\204\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\006\004\354\010\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\373\012\016\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\002\001" +
    "\001\000\006\013\364\032\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\370\012\016\013\065\014" +
    "\007\015\057\016\003\017\050\020\045\021\027\022\017" +
    "\023\056\024\053\025\046\026\047\027\044\030\004\031" +
    "\005\032\062\033\034\034\055\001\001\000\002\001\001" +
    "\000\050\012\204\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\012\204\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\377" +
    "\032\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0103\012\016\013\065\014\007\015\057\016\003" +
    "\017\050\020\045\021\027\022\017\023\056\024\053\025" +
    "\046\026\047\027\044\030\004\031\005\032\062\033\034" +
    "\034\055\001\001\000\002\001\001\000\050\012\204\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u010b\012\016" +
    "\013\065\014\007\015\057\016\003\017\050\020\045\021" +
    "\027\022\017\023\056\024\053\025\046\026\047\027\044" +
    "\030\004\031\005\032\062\033\034\034\055\001\001\000" +
    "\002\001\001\000\050\012\204\013\065\014\007\015\057" +
    "\016\003\017\050\020\045\021\027\022\017\023\056\024" +
    "\053\025\046\026\047\027\044\030\004\031\005\032\062" +
    "\033\034\034\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\u0110\031\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u0114\012" +
    "\016\013\065\014\007\015\057\016\003\017\050\020\045" +
    "\021\027\022\017\023\056\024\053\025\046\026\047\027" +
    "\044\030\004\031\005\032\062\033\034\034\055\001\001" +
    "\000\002\001\001\000\050\012\204\013\065\014\007\015" +
    "\057\016\003\017\050\020\045\021\027\022\017\023\056" +
    "\024\053\025\046\026\047\027\044\030\004\031\005\032" +
    "\062\033\034\034\055\001\001\000\002\001\001\000\052" +
    "\003\u0118\012\016\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\002\001\001\000\050\012\204\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u011f\032\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0122\032\062" +
    "\001\001\000\002\001\001\000\052\003\u0125\012\016\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\050\012\204\013\065\014\007\015\057\016" +
    "\003\017\050\020\045\021\027\022\017\023\056\024\053" +
    "\025\046\026\047\027\044\030\004\031\005\032\062\033" +
    "\034\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u0129\032\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u012d\032\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u0130\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0135\001\001\000\006\013\u0140\032\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u013b\032\062\001\001\000\002\001\001\000" +
    "\052\003\u013a\012\016\013\065\014\007\015\057\016\003" +
    "\017\050\020\045\021\027\022\017\023\056\024\053\025" +
    "\046\026\047\027\044\030\004\031\005\032\062\033\034" +
    "\034\055\001\001\000\050\012\204\013\065\014\007\015" +
    "\057\016\003\017\050\020\045\021\027\022\017\023\056" +
    "\024\053\025\046\026\047\027\044\030\004\031\005\032" +
    "\062\033\034\034\055\001\001\000\002\001\001\000\052" +
    "\003\u013d\012\016\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\050\012\204\013\065\014\007\015\057" +
    "\016\003\017\050\020\045\021\027\022\017\023\056\024" +
    "\053\025\046\026\047\027\044\030\004\031\005\032\062" +
    "\033\034\034\055\001\001\000\052\003\u013f\012\016\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\050" +
    "\012\204\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\002\001\001\000\052\003\u0142\012\016\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\050\012" +
    "\204\013\065\014\007\015\057\016\003\017\050\020\045" +
    "\021\027\022\017\023\056\024\053\025\046\026\047\027" +
    "\044\030\004\031\005\032\062\033\034\034\055\001\001" +
    "\000\006\013\u0144\032\062\001\001\000\002\001\001\000" +
    "\006\013\u0146\032\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u014a\032\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0159\031" +
    "\234\001\001\000\006\013\u0153\032\062\001\001\000\010" +
    "\006\u0156\013\130\032\062\001\001\000\004\031\u0154\001" +
    "\001\000\002\001\001\000\004\007\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u015d" +
    "\012\016\013\065\014\007\015\057\016\003\017\050\020" +
    "\045\021\027\022\017\023\056\024\053\025\046\026\047" +
    "\027\044\030\004\031\005\032\062\033\034\034\055\001" +
    "\001\000\002\001\001\000\050\012\204\013\065\014\007" +
    "\015\057\016\003\017\050\020\045\021\027\022\017\023" +
    "\056\024\053\025\046\026\047\027\044\030\004\031\005" +
    "\032\062\033\034\034\055\001\001\000\002\001\001\000" +
    "\052\003\u0161\012\016\013\065\014\007\015\057\016\003" +
    "\017\050\020\045\021\027\022\017\023\056\024\053\025" +
    "\046\026\047\027\044\030\004\031\005\032\062\033\034" +
    "\034\055\001\001\000\002\001\001\000\050\012\204\013" +
    "\065\014\007\015\057\016\003\017\050\020\045\021\027" +
    "\022\017\023\056\024\053\025\046\026\047\027\044\030" +
    "\004\031\005\032\062\033\034\034\055\001\001\000\002" +
    "\001\001\000\006\005\u0167\031\234\001\001\000\006\013" +
    "\u0165\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u016b\012" +
    "\016\013\065\014\007\015\057\016\003\017\050\020\045" +
    "\021\027\022\017\023\056\024\053\025\046\026\047\027" +
    "\044\030\004\031\005\032\062\033\034\034\055\001\001" +
    "\000\002\001\001\000\050\012\204\013\065\014\007\015" +
    "\057\016\003\017\050\020\045\021\027\022\017\023\056" +
    "\024\053\025\046\026\047\027\044\030\004\031\005\032" +
    "\062\033\034\034\055\001\001\000\002\001\001\000\052" +
    "\003\u016f\012\016\013\065\014\007\015\057\016\003\017" +
    "\050\020\045\021\027\022\017\023\056\024\053\025\046" +
    "\026\047\027\044\030\004\031\005\032\062\033\034\034" +
    "\055\001\001\000\002\001\001\000\050\012\204\013\065" +
    "\014\007\015\057\016\003\017\050\020\045\021\027\022" +
    "\017\023\056\024\053\025\046\026\047\027\044\030\004" +
    "\031\005\032\062\033\034\034\055\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruction> AST;
    public ArrayList<Error_> errorList = new ArrayList<Error_>();

    public String salida = "" ; // Aquí guardaremos nuestra resultado.
    private int contador = 0;

    public void syntax_error(Symbol s)
    {
        Error_ newError = new Error_(s.right, (s.left - 1), "Sintactico", "Elemento sintactico desconocido: '" + (String)s.value + "'.");
        errorList.add(newError);
        //System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) + " Columna " + (s.left+1) + ". Identificador " + s.value + " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("El analizador No se recupero tras el error\nError en la Línea " + (s.right+1) + "Columna "+ (s.left+1)+ ". Identificador " + s.value + " no reconocido.");
    }

    public void setSalida(String cadena){salida = cadena;} // Metodo que guarda nuestro resultado.


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.AST = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRIMIR puntoComa 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print i = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= GRAFICAR_DOT puntoComa 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GraphDot g = (GraphDot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= GRAFICAR_ENV puntoComa 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GraphEnv g = (GraphEnv)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION puntoComa 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION puntoComa 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Signature a = (Signature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DOWHILE puntoComa 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile d = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= IMPORT puntoComa 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Import i = (Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CLASE 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Class_ c = (Class_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SWITCH 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch s = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= WHILE 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FOR 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IF 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= VOID 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Void v = (Void)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= INSTANCIA puntoComa 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instance i = (Instance)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= FUNCTION 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; /*aqui alv*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= EXPRESION puntoComa 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= continue_ puntoComa 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(cright, cleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= break_ puntoComa 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(bright, bleft -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= return_ puntoComa 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(null, rright, rleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= return_ EXPRESION puntoComa 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e, rright, rleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTANCIA ::= id id igual new_ id parIzq parDer 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instance(i2, i1, i3, null, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTANCIA ::= id id 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instance(i2, i1, "", null, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTANCIA ::= id id igual new_ id parIzq PARAMS_VALUE parDer 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instance(i2, i1, i3, pv, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTANCIA ::= id id igual EXPRESION 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instance(i2, i1, e, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTANCIA ::= id ARREGLO id igual new_ id TAM_ARREGLOS 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instance(i2, i1, i3, a, ta, null, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTANCIA ::= id ARREGLO id igual EXPRESION 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instance(i2, i1, null, a, null, e, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTANCIA ::= id ARREGLO id 
            {
              Instance RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instance(i2, i1, null, a, null, null, i1right, i1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CLASE ::= class_ id llaveAbre INSTRUCCIONES llaveCierre 
            {
              Class_ RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Class_(i, ins, cright, cleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CLASE ::= class_ id llaveAbre llaveCierre 
            {
              Class_ RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Class_(i, null, cright, cleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_VOID_CALL ::= id parIzq parDer 
            {
              FunctionVoid_Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionVoid_Call(i, null, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_VOID_CALL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTION_VOID_CALL ::= id parIzq PARAMS_VALUE parDer 
            {
              FunctionVoid_Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionVoid_Call(i, pv, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_VOID_CALL",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS_VALUE ::= PARAMS_VALUE coma EXPRESION 
            {
              LinkedList<Expression> RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = pv;
        RESULT.add(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VALUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS_VALUE ::= EXPRESION 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS_VALUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VOID ::= void_ id parIzq parDer llaveAbre llaveCierre 
            {
              Void RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Void(i, EnumType.metodo, null, null, vright, vleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VOID ::= void_ id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Void RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Void(i, EnumType.metodo, ins, null, vright, vleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VOID ::= void_ id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Void RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Void(i, EnumType.metodo, null, p, vright, vleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VOID ::= void_ id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Void RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Void(i, EnumType.metodo, ins, p, vright, vleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VOID ::= id parIzq parDer llaveAbre llaveCierre 
            {
              Void RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Void(i, EnumType.constructor, null, null, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VOID ::= id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Void RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Void(i, EnumType.constructor, ins, null, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VOID ::= id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Void RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Void(i, EnumType.constructor, null, p, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VOID ::= id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Void RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Void(i, EnumType.constructor, ins, p, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCTION ::= TIPO id parIzq parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Function(i, t, null, null, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCTION ::= TIPO id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, t, ins, null, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCTION ::= TIPO id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Function(i, t, null, p, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCTION ::= TIPO id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, t, ins, p, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCTION ::= id id parIzq parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Function(i, EnumType.objeto, null, null, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCTION ::= id id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, EnumType.objeto, ins, null, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCTION ::= id id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Function(i, EnumType.objeto, null, p, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCTION ::= id id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, EnumType.objeto, ins, p, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCTION ::= TIPO ARREGLO id parIzq parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Function(i, t, null, null, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCTION ::= TIPO ARREGLO id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, t, ins, null, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCTION ::= TIPO ARREGLO id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Function(i, t, null, p, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCTION ::= TIPO ARREGLO id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, t, ins, p, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCTION ::= id ARREGLO id parIzq parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Function(i, EnumType.objeto, null, null, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCTION ::= id ARREGLO id parIzq parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, EnumType.objeto, ins, null, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCTION ::= id ARREGLO id parIzq PARAMETROS parDer llaveAbre llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Function(i, EnumType.objeto, null, p, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCTION ::= id ARREGLO id parIzq PARAMETROS parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(i, EnumType.objeto, ins, p, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= PARAMETROS coma TIPO id 
            {
              LinkedList<Declaration> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = p;
        RESULT.add(new Declaration(i, t, null, -1, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS ::= PARAMETROS coma id id 
            {
              LinkedList<Declaration> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaration> p = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = p;
        RESULT.add(new Declaration(i, EnumType.objeto, null, -1, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROS ::= TIPO id 
            {
              LinkedList<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Declaration(i, t, null, -1, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= id id 
            {
              LinkedList<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Declaration(i, EnumType.objeto, null, -1, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROS ::= TIPO ARREGLO id 
            {
              LinkedList<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Declaration(i, t, null, a, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS ::= id ARREGLO id 
            {
              LinkedList<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Declaration(i, EnumType.objeto, null, a, tright, tleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IMPORT ::= import_ EXPRESION 
            {
              Import RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Import(e, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= TIPO id igual EXPRESION 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(i, t, e, -1, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= TIPO id 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(i, t, null, -1, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= TIPO ARREGLO id igual llaveAbre PARAMS_VALUE llaveCierre 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaration(i, t, null, a, pv, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= TIPO ARREGLO id igual new_ TIPO TAM_ARREGLOS 
            {
              Declaration RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumType t1 = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EnumType t2 = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(t2, i, t1, a, ta, t1right, t1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= TIPO ARREGLO id igual EXPRESION 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(i, t, e, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= TIPO ARREGLO id 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EnumType t = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(i, t, null, a, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARREGLO ::= ARREGLO corcheteAbre corcheteCierre 
            {
              int RESULT =0;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = a;
        RESULT++;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARREGLO ::= corcheteAbre corcheteCierre 
            {
              int RESULT =0;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TAM_ARREGLOS ::= TAM_ARREGLOS corcheteAbre EXPRESION corcheteCierre 
            {
              LinkedList<Expression> RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = ta;
        RESULT.add(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAM_ARREGLOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TAM_ARREGLOS ::= corcheteAbre EXPRESION corcheteCierre 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAM_ARREGLOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= EXPRESION igual EXPRESION 
            {
              Signature RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Signature(i, e, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNACION ::= EXPRESION igual new_ id parIzq PARAMS_VALUE parDer 
            {
              Signature RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Signature(e, i3, pv, false, eright, eleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNACION ::= EXPRESION igual new_ id parIzq parDer 
            {
              Signature RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Signature(e, i3, null, false, eright, eleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNACION ::= EXPRESION igual new_ id TAM_ARREGLOS 
            {
              Signature RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Signature(e, i3, ta, true, eright, eleft -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= EXPRESION igual new_ TIPO TAM_ARREGLOS 
            {
              Signature RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EnumType i3 = (EnumType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Signature(e, i3, ta, true, eright, eleft -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNACION ::= EXPRESION igual llaveAbre PARAMS_VALUE llaveCierre 
            {
              Signature RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> pv = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Signature(e, pv, eright, eleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= for_ parIzq INSTRUCCION INSTRUCCION ASIGNACION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Signature a = (Signature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(i, a, c, ins, fright, fleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR ::= for_ parIzq INSTRUCCION INSTRUCCION EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(i, a, c, ins, fright, fleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= for_ parIzq INSTRUCCION INSTRUCCION ASIGNACION parDer llaveAbre llaveCierre 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Signature a = (Signature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new For(i, a, c, null, fright, fleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= for_ parIzq INSTRUCCION INSTRUCCION EXPRESION parDer llaveAbre llaveCierre 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new For(i, a, c, null, fright, fleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DOWHILE ::= do_ llaveAbre INSTRUCCIONES llaveCierre while_ parIzq EXPRESION parDer 
            {
              DoWhile RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, i, dright, dleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DOWHILE ::= do_ llaveAbre llaveCierre while_ parIzq EXPRESION parDer 
            {
              DoWhile RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(e, null, dright, dleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WHILE ::= while_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              While RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, i, wright, wleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WHILE ::= while_ parIzq EXPRESION parDer llaveAbre llaveCierre 
            {
              While RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While(e, null, wright, wleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF ::= if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, i, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= if_ parIzq EXPRESION parDer llaveAbre llaveCierre 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new If(e, null, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre ELSE 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> el = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, i, el, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= if_ parIzq EXPRESION parDer llaveAbre llaveCierre ELSE 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> el = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, null, el, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre ELSE_IF 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, i, ei, true, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF ::= if_ parIzq EXPRESION parDer llaveAbre llaveCierre ELSE_IF 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, null, ei, true, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre ELSE_IF ELSE 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> el = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, i, el, ei, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= if_ parIzq EXPRESION parDer llaveAbre llaveCierre ELSE_IF ELSE 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> el = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e, null, el, ei, aright, aleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELSE_IF ::= ELSE_IF else_ if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              LinkedList<If> RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = ei;
        RESULT.addFirst(new If(e, i, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELSE_IF ::= ELSE_IF else_ if_ parIzq EXPRESION parDer llaveAbre llaveCierre 
            {
              LinkedList<If> RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<If> ei = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = ei;
        RESULT.addFirst(new If(e, null, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELSE_IF ::= else_ if_ parIzq EXPRESION parDer llaveAbre INSTRUCCIONES llaveCierre 
            {
              LinkedList<If> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new If(e, i, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE_IF ::= else_ if_ parIzq EXPRESION parDer llaveAbre llaveCierre 
            {
              LinkedList<If> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new If(e, null, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSE ::= else_ llaveAbre INSTRUCCIONES llaveCierre 
            {
              LinkedList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELSE ::= else_ llaveAbre llaveCierre 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCH ::= switch_ parIzq EXPRESION parDer llaveAbre CASES llaveCierre 
            {
              Switch RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Switch(e, c, sright, sleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASES ::= CASES case_ EXPRESION dosPuntos INSTRUCCIONES 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = c;
        RESULT.add(new Case(e, i, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASES ::= CASES case_ EXPRESION dosPuntos 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASES ::= CASES default_ dosPuntos INSTRUCCIONES 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = c;
        RESULT.add(new Case(null, i, dright, dleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASES ::= CASES default_ dosPuntos 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASES ::= case_ EXPRESION dosPuntos INSTRUCCIONES 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Case(e, i, aright, aleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASES ::= case_ EXPRESION dosPuntos 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASES ::= default_ dosPuntos INSTRUCCIONES 
            {
              LinkedList<Case> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Case(null, i, dright, dleft - 1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASES ::= default_ dosPuntos 
            {
              LinkedList<Case> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IMPRIMIR ::= println_ parIzq EXPRESION parDer 
            {
              Print RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, true, pright, pleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMPRIMIR ::= print_ parIzq EXPRESION parDer 
            {
              Print RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, false, pright, pleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // GRAFICAR_DOT ::= graficar_dot parIzq EXPRESION coma EXPRESION parDer 
            {
              GraphDot RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new GraphDot(e1, e2, gright, gleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICAR_DOT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // GRAFICAR_ENV ::= graficar_env parIzq parDer 
            {
              GraphEnv RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new GraphEnv(gright, gleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICAR_ENV",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= int_ 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.entero; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPO ::= double_ 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.doble; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO ::= char_ 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.caracter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPO ::= string_ 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.cadena; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPO ::= boolean_ 
            {
              EnumType RESULT =null;
		 RESULT = EnumType.booleano; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.SUMA, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.RESTA, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MULTIPLICACION, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= EXPRESION dividido EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.DIVISION, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.POTENCIA, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MODULO, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= EXPRESION mayorQue EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MAYOR_QUE, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= EXPRESION menorQue EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MENOR_QUE, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= EXPRESION mayorIgual EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MAYOR_IGUAL, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= EXPRESION menorIgual EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.MENOR_IGUAL, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= EXPRESION igualIgual EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.IGUAL_IGUAL, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= EXPRESION diferenteIgual EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.DIFERENTE_IGUAL, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.AND, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.OR, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= EXPRESION xor EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.XOR, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= EXPRESION punto EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, e2, Expression_type.ACCESO, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= this_ punto EXPRESION 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, Expression_type.THIS, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= not EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, Expression_type.NOT, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= menos EXPRESION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(e1, Expression_type.NEGATIVO, e1right, e1left - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= parIzq EXPRESION parDer 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= entero 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(((long)(Integer.parseInt(e))), eright, eleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= doble 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(Double.parseDouble(d), dright, dleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= caracter 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(c.charAt(1), cright, cleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= cadena 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(c.substring(1, c.length() - 1), cright, cleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= true_ 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(true, tright, tleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= false_ 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(false, fright, fleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= null_ 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(Expression_type.NULO, nright, nleft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION ::= id 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(i, Expression_type.IDENTIFICADOR, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION ::= id TAM_ARREGLOS 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> ta = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(i, Expression_type.IDENTIFICADOR, ta, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION ::= id masMas 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expression(i, Expression_type.AUMENTO, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION ::= id menosMenos 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expression(i, Expression_type.DECREMENTO, iright, ileft - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION ::= FUNCTION_VOID_CALL 
            {
              Expression RESULT =null;
		int fvcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionVoid_Call fvc = (FunctionVoid_Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(fvc.id, fvc.parametersExpression, Expression_type.FUNCION, fvc.line, fvc.column); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
