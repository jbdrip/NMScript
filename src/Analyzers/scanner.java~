/* The following code was generated by JFlex 1.7.0 */

package Analyzers;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import proyecto_olc1.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.l</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ESPECIAL = 2;
  public static final int CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  5,  7,  8,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    12, 48, 13,  0,  0, 44, 49,  4, 52, 53, 11, 42, 39, 43,  2, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 41, 40, 46, 47, 45,  0, 
     0, 28, 23, 26, 20, 25, 32, 31, 27, 19,  3, 35, 24, 38, 15, 21, 
    37,  3, 16, 30, 17, 22, 36, 33,  3,  3,  3, 56, 14, 57, 51,  9, 
     0, 28, 23, 26, 20, 25, 32, 31, 27, 19,  3, 35, 24, 38, 15, 21, 
    37,  3, 16, 30, 17, 22, 36, 33,  3,  3,  3, 54, 50, 55,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\3\4\1\1\5\4\1\1\6\4"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\1\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\2\0\1\5\1\0\1\43\5\4\1\0"+
    "\1\44\1\0\1\4\1\44\1\4\1\45\10\4\2\0"+
    "\10\4\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\2\0\1\4\1\60\2\4\1\0"+
    "\1\4\1\61\1\0\1\61\5\4\1\0\4\4\1\0"+
    "\1\4\2\0\3\4\1\62\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\5\1\63\1\4\1\64"+
    "\2\65\1\0\5\4\2\66\1\4\1\0\1\4\1\67"+
    "\2\70\2\0\3\4\1\0\1\4\1\0\1\4\2\71"+
    "\1\0\2\4\1\0\3\4\2\72\1\4\1\0\1\4"+
    "\2\73\2\0\2\4\1\0\1\4\2\74\2\75\2\76"+
    "\1\77\2\100\1\101\2\4\1\0\1\4\1\102\1\103"+
    "\1\102\1\103\1\0\1\4\1\0\1\4\1\104\1\105"+
    "\1\0\1\4\1\0\1\4\2\106\2\107\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\2\0\2\4\1\110\1\0"+
    "\1\110\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\2\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\u015c"+
    "\0\256\0\256\0\u0196\0\u01d0\0\256\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\256\0\256\0\256"+
    "\0\u05aa\0\u05e4\0\256\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\256\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\256\0\u09be\0\u09f8\0\u0122\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u077a\0\256\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0122\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\256\0\u1050\0\u0122"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u0122\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u0eba\0\u0122\0\u1634\0\u0122\0\256\0\u0122"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\256\0\u0122"+
    "\0\u17ca\0\u1804\0\u183e\0\u0122\0\256\0\u0122\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\256"+
    "\0\u0122\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\256\0\u0122\0\u1c18\0\u1c52\0\u1c8c\0\256\0\u0122\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\256\0\u0122\0\256"+
    "\0\u0122\0\u1e22\0\u1e5c\0\u0122\0\256\0\u0122\0\u0122\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\256\0\256\0\u0122\0\u0122\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u0122\0\u0122\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\256\0\u0122\0\256\0\u0122\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\256\0\u2406\0\u0122\0\u2440\0\u247a\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\256\0\u0122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\12\1\4\1\13\1\14\1\12\1\15\1\4\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\7\1\24\1\7"+
    "\1\25\1\26\2\7\1\27\1\30\1\31\1\32\1\33"+
    "\1\4\1\7\1\34\1\35\1\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\5\4\1\11\3\0\4\4\1\61\1\62\1\63\1\64"+
    "\1\65\50\4\15\66\1\67\1\70\53\66\73\0\1\5"+
    "\1\71\70\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\12\7\1\0\4\7\1\0\4\7\23\0"+
    "\5\72\4\0\61\72\12\0\1\73\1\74\71\0\1\75"+
    "\57\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\3\7\1\76\2\7\1\77\3\7\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\3\7\1\0\6\7\1\100\3\7\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\1\7\1\101\1\7\1\0\10\7\1\102\1\7"+
    "\1\0\4\7\1\0\4\7\42\0\1\103\20\0\1\104"+
    "\5\0\1\105\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\1\106\2\7\1\0\12\7\1\0\2\7\1\107"+
    "\1\7\1\0\3\7\1\110\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\2\7\1\111\3\7"+
    "\1\112\3\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\1\7\1\113\1\7"+
    "\1\0\2\7\1\114\7\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\5\7\1\115\4\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\2\7\1\116\2\7\1\117\2\7\1\120\1\121"+
    "\1\0\4\7\1\0\4\7\44\0\1\122\17\0\1\123"+
    "\31\0\1\7\1\0\1\7\5\0\1\7\5\0\2\7"+
    "\1\124\1\0\12\7\1\0\3\7\1\125\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\1\7"+
    "\1\126\1\7\1\0\12\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\2\7\1\127\6\7\1\130\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\10\7\1\131\1\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\2\7\1\132\7\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\1\7\1\133\1\7\1\0\12\7\1\0\4\7\1\0"+
    "\4\7\75\0\1\134\72\0\1\135\75\0\1\136\71\0"+
    "\1\137\71\0\1\140\71\0\1\141\73\0\1\142\72\0"+
    "\1\143\10\0\1\144\74\0\1\145\65\0\5\73\2\0"+
    "\63\73\12\146\1\0\1\147\56\146\1\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\5\7\1\150"+
    "\4\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\12\7\1\0"+
    "\3\7\1\151\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\2\7\1\152\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\3\7\1\153\6\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\154\1\155\11\7\1\0\4\7"+
    "\1\0\4\7\44\0\1\156\115\0\1\157\25\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\2\7\1\160\1\0"+
    "\12\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\12\7\1\0"+
    "\4\7\1\0\2\7\1\161\1\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\3\7\1\162"+
    "\6\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\12\7\1\0"+
    "\2\7\1\163\1\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\6\7\1\164"+
    "\3\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\2\7\1\165"+
    "\7\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\12\7\1\166"+
    "\1\167\3\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\1\170\2\7\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\11\7\1\171\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\3\7\1\0\11\7\1\172\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\12\7\1\173\1\174\3\7\1\0\4\7"+
    "\43\0\1\175\73\0\2\176\47\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\1\7\1\177\1\7\1\0\12\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\176\1\200\11\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\11\7\1\201\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\1\7\1\202\1\7\1\0\12\7\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\3\7\1\0\5\7\1\203\4\7\1\0\4\7"+
    "\1\0\4\7\24\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\3\7\1\204\1\205\11\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\206\1\207\11\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\210\1\211\11\7\1\0\4\7\1\0\4\7\23\0"+
    "\13\146\1\212\70\146\1\213\1\212\56\146\1\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\5\7"+
    "\1\214\4\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\3\7"+
    "\1\215\6\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\6\7"+
    "\1\216\3\7\1\0\4\7\1\0\4\7\60\0\2\217"+
    "\34\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\12\7\1\217\1\220\3\7\1\0\4\7\50\0"+
    "\1\221\45\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\2\7\1\222\7\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\4\7\1\223\5\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\11\7\1\224\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\11\7\1\225\1\0\4\7\1\0\4\7\24\0"+
    "\1\7\1\0\1\7\5\0\1\7\5\0\3\7\1\0"+
    "\5\7\1\226\4\7\1\0\4\7\1\0\4\7\54\0"+
    "\1\227\41\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\6\7\1\230\3\7\1\0\4\7\1\0"+
    "\4\7\24\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\2\7\1\231\1\0\12\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\12\7\1\232\1\233\3\7\1\0\4\7\24\0"+
    "\1\7\1\0\1\7\5\0\1\7\5\0\1\7\1\234"+
    "\1\7\1\0\12\7\1\0\4\7\1\0\4\7\54\0"+
    "\1\235\41\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\6\7\1\236\3\7\1\0\4\7\1\0"+
    "\4\7\45\0\2\237\67\0\1\240\51\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\237\1\241\11\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\2\7\1\242\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\12\7\1\0\2\7\1\243"+
    "\1\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\12\7\1\244\1\245\3\7"+
    "\1\0\4\7\53\0\1\246\42\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\5\7\1\247\4\7"+
    "\1\0\4\7\1\0\4\7\47\0\1\250\46\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\1\7"+
    "\1\251\10\7\1\0\4\7\1\0\4\7\42\0\1\252"+
    "\53\0\1\7\1\0\1\7\5\0\1\7\5\0\1\253"+
    "\2\7\1\0\12\7\1\0\4\7\1\0\4\7\23\0"+
    "\12\146\1\11\1\212\56\146\1\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\1\7\1\254\1\7\1\0\12\7"+
    "\1\0\4\7\1\0\4\7\43\0\1\255\52\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\1\7\1\256\1\7"+
    "\1\0\12\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\5\7"+
    "\1\257\4\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\3\7"+
    "\1\260\6\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\12\7"+
    "\1\0\4\7\1\261\1\262\3\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\0\6\7\1\263"+
    "\3\7\1\0\4\7\1\0\4\7\24\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\3\7\1\264\1\265\11\7"+
    "\1\0\4\7\1\0\4\7\60\0\2\266\34\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\12\7"+
    "\1\266\1\267\3\7\1\0\4\7\42\0\1\270\104\0"+
    "\1\271\40\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\1\272\2\7\1\0\12\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\7\7\1\273\2\7\1\0\4\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\274\1\275\11\7\1\0\4\7\1\0\4\7\54\0"+
    "\1\276\41\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\3\7\1\0\6\7\1\277\3\7\1\0\4\7\1\0"+
    "\4\7\54\0\1\300\41\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\3\7\1\0\6\7\1\301\3\7\1\0"+
    "\4\7\1\0\4\7\44\0\1\302\51\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\2\7\1\303\1\0\12\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\1\304\2\7\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\44\0\1\305\51\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\2\7\1\306\1\0\12\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\6\7\1\307\3\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\5\7\1\310\4\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\11\7\1\311\1\0"+
    "\4\7\1\0\4\7\42\0\1\312\53\0\1\7\1\0"+
    "\1\7\5\0\1\7\5\0\1\313\2\7\1\0\12\7"+
    "\1\0\4\7\1\0\4\7\62\0\1\314\65\0\1\315"+
    "\37\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\12\7\1\0\1\7\1\316\2\7\1\0\4\7"+
    "\24\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\10\7\1\317\1\7\1\0\4\7\1\0\4\7"+
    "\55\0\1\320\40\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\3\7\1\0\7\7\1\321\2\7\1\0\4\7"+
    "\1\0\4\7\53\0\1\322\42\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\5\7\1\323\4\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\2\7\1\324\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\24\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\1\325\2\7\1\0\12\7\1\0\4\7"+
    "\1\0\4\7\51\0\1\326\44\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\3\7\1\327\6\7"+
    "\1\0\4\7\1\0\4\7\57\0\1\330\36\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\11\7"+
    "\1\331\1\0\4\7\1\0\4\7\42\0\1\332\53\0"+
    "\1\7\1\0\1\7\5\0\1\7\5\0\1\333\2\7"+
    "\1\0\12\7\1\0\4\7\1\0\4\7\54\0\1\334"+
    "\41\0\1\7\1\0\1\7\5\0\1\7\5\0\3\7"+
    "\1\0\6\7\1\335\3\7\1\0\4\7\1\0\4\7"+
    "\43\0\1\336\52\0\1\7\1\0\1\7\5\0\1\7"+
    "\5\0\1\7\1\337\1\7\1\0\12\7\1\0\4\7"+
    "\1\0\4\7\34\0\1\340\61\0\1\7\1\0\1\7"+
    "\5\0\1\341\5\0\3\7\1\0\12\7\1\0\4\7"+
    "\1\0\4\7\47\0\1\342\4\0\1\343\41\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\1\7"+
    "\1\344\4\7\1\345\3\7\1\0\4\7\1\0\4\7"+
    "\50\0\1\346\63\0\1\347\53\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\2\7\1\350\7\7"+
    "\1\0\4\7\1\0\4\7\24\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\1\351\2\7\1\0\12\7\1\0"+
    "\4\7\1\0\4\7\44\0\1\352\71\0\1\353\51\0"+
    "\1\7\1\0\1\7\5\0\1\7\5\0\2\7\1\354"+
    "\1\0\12\7\1\0\4\7\1\0\4\7\24\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\2\7\1\355\1\0"+
    "\12\7\1\0\4\7\1\0\4\7\50\0\1\356\45\0"+
    "\1\7\1\0\1\7\5\0\1\7\5\0\3\7\1\0"+
    "\2\7\1\357\7\7\1\0\4\7\1\0\4\7\43\0"+
    "\1\360\52\0\1\7\1\0\1\7\5\0\1\7\5\0"+
    "\1\7\1\361\1\7\1\0\12\7\1\0\4\7\1\0"+
    "\4\7\42\0\1\362\53\0\1\7\1\0\1\7\5\0"+
    "\1\7\5\0\1\363\2\7\1\0\12\7\1\0\4\7"+
    "\1\0\4\7\50\0\1\364\45\0\1\7\1\0\1\7"+
    "\5\0\1\7\5\0\3\7\1\0\2\7\1\365\7\7"+
    "\1\0\4\7\1\0\4\7\60\0\2\366\34\0\1\7"+
    "\1\0\1\7\5\0\1\7\5\0\3\7\1\0\12\7"+
    "\1\366\1\367\3\7\1\0\4\7\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9802];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\2\11\2\1\1\11"+
    "\20\1\3\11\2\1\1\11\6\1\17\11\2\0\1\1"+
    "\1\0\1\11\5\1\1\0\1\11\1\0\14\1\2\0"+
    "\10\1\10\11\1\1\1\11\2\0\4\1\1\0\1\1"+
    "\1\11\1\0\6\1\1\0\4\1\1\0\1\1\2\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\11\1\1\1\0\5\1\1\11\2\1\1\0"+
    "\2\1\1\11\1\1\2\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\3\1\1\11"+
    "\2\1\1\0\1\1\1\11\1\1\2\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\11\4\1\1\11\4\1\1\0"+
    "\1\1\2\11\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\2\0\2\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Error_> errorList = new ArrayList<Error_>();
    public PaintLetters paint = new PaintLetters();
    String cadena = "";
    int iniCadena = 0, lengthCadena = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 0; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Error_ newError = new Error_(yyline + 1, yychar - 1, "Lexico", "Elemento lexico desconocido: '" + yytext() + "'");
    errorList.add(newError);
            } 
            // fall through
          case 74: break;
          case 2: 
            { return new Symbol(sym.entero, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 75: break;
          case 3: 
            { return new Symbol(sym.punto, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 76: break;
          case 4: 
            { return new Symbol(sym.id, yychar + 1, yyline + 1, yytext());
            } 
            // fall through
          case 77: break;
          case 5: 
            { yychar = 1;
            } 
            // fall through
          case 78: break;
          case 6: 
            { /*Ignorar*/
            } 
            // fall through
          case 79: break;
          case 7: 
            { return new Symbol(sym.dividido, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 80: break;
          case 8: 
            { return new Symbol(sym.por, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 81: break;
          case 9: 
            { cadena = ""; iniCadena = yychar; lengthCadena = 0; lengthCadena++; yybegin(CADENA);
            } 
            // fall through
          case 82: break;
          case 10: 
            { return new Symbol(sym.coma, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 83: break;
          case 11: 
            { return new Symbol(sym.puntoComa, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 84: break;
          case 12: 
            { return new Symbol(sym.dosPuntos, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 85: break;
          case 13: 
            { return new Symbol(sym.mas, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 86: break;
          case 14: 
            { return new Symbol(sym.menos, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 87: break;
          case 15: 
            { return new Symbol(sym.modulo, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 88: break;
          case 16: 
            { return new Symbol(sym.mayorQue, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 89: break;
          case 17: 
            { return new Symbol(sym.menorQue, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 90: break;
          case 18: 
            { return new Symbol(sym.igual, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 91: break;
          case 19: 
            { return new Symbol(sym.not, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 92: break;
          case 20: 
            { return new Symbol(sym.xor, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 93: break;
          case 21: 
            { return new Symbol(sym.parIzq, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 94: break;
          case 22: 
            { return new Symbol(sym.parDer, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 95: break;
          case 23: 
            { return new Symbol(sym.llaveAbre, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 96: break;
          case 24: 
            { return new Symbol(sym.llaveCierre, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 97: break;
          case 25: 
            { return new Symbol(sym.corcheteAbre, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 98: break;
          case 26: 
            { return new Symbol(sym.corcheteCierre, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 99: break;
          case 27: 
            { cadena += "\""; yybegin(CADENA);
            } 
            // fall through
          case 100: break;
          case 28: 
            { cadena += "\\"; yybegin(CADENA);
            } 
            // fall through
          case 101: break;
          case 29: 
            { cadena += "\n"; yybegin(CADENA);
            } 
            // fall through
          case 102: break;
          case 30: 
            { cadena += "\r"; yybegin(CADENA);
            } 
            // fall through
          case 103: break;
          case 31: 
            { cadena += "\t"; yybegin(CADENA);
            } 
            // fall through
          case 104: break;
          case 32: 
            { cadena += yytext(); lengthCadena++;
            } 
            // fall through
          case 105: break;
          case 33: 
            { yybegin(YYINITIAL); lengthCadena++; return new Symbol(sym.cadena, iniCadena, yyline + 1,  "\"" + cadena + "\"");
            } 
            // fall through
          case 106: break;
          case 34: 
            { yybegin(ESPECIAL); lengthCadena++;
            } 
            // fall through
          case 107: break;
          case 35: 
            { return new Symbol(sym.potencia, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 108: break;
          case 36: 
            { return new Symbol(sym.if_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 109: break;
          case 37: 
            { return new Symbol(sym.do_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 110: break;
          case 38: 
            { return new Symbol(sym.masMas, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 111: break;
          case 39: 
            { return new Symbol(sym.menosMenos, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 112: break;
          case 40: 
            { return new Symbol(sym.mayorIgual, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 113: break;
          case 41: 
            { return new Symbol(sym.menorIgual, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 114: break;
          case 42: 
            { return new Symbol(sym.igualIgual, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 115: break;
          case 43: 
            { return new Symbol(sym.diferenteIgual, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 116: break;
          case 44: 
            { return new Symbol(sym.and, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 117: break;
          case 45: 
            { return new Symbol(sym.or, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 118: break;
          case 46: 
            { return new Symbol(sym.doble, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 119: break;
          case 47: 
            { return new Symbol(sym.caracter, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 120: break;
          case 48: 
            { return new Symbol(sym.new_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 121: break;
          case 49: 
            { return new Symbol(sym.int_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 122: break;
          case 50: 
            { return new Symbol(sym.for_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 123: break;
          case 51: 
            { return new Symbol(sym.null_, yychar, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 52: 
            { return new Symbol(sym.true_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 125: break;
          case 53: 
            { return new Symbol(sym.this_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 126: break;
          case 54: 
            { return new Symbol(sym.else_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 127: break;
          case 55: 
            { return new Symbol(sym.char_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 128: break;
          case 56: 
            { return new Symbol(sym.case_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 129: break;
          case 57: 
            { return new Symbol(sym.void_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 130: break;
          case 58: 
            { return new Symbol(sym.break_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 131: break;
          case 59: 
            { return new Symbol(sym.class_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 132: break;
          case 60: 
            { return new Symbol(sym.false_, yychar , yyline + 1, yytext());
            } 
            // fall through
          case 133: break;
          case 61: 
            { return new Symbol(sym.while_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 134: break;
          case 62: 
            { return new Symbol(sym.print_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 135: break;
          case 63: 
            { return new Symbol(sym.return_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 136: break;
          case 64: 
            { return new Symbol(sym.import_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 137: break;
          case 65: 
            { return new Symbol(sym.double_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 138: break;
          case 66: 
            { return new Symbol(sym.string_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 139: break;
          case 67: 
            { return new Symbol(sym.switch_, yychar , yyline + 1, yytext());
            } 
            // fall through
          case 140: break;
          case 68: 
            { return new Symbol(sym.default_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 141: break;
          case 69: 
            { return new Symbol(sym.boolean_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 142: break;
          case 70: 
            { return new Symbol(sym.println_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 143: break;
          case 71: 
            { return new Symbol(sym.continue_, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 144: break;
          case 72: 
            { return new Symbol(sym.graficar_dot, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 145: break;
          case 73: 
            { return new Symbol(sym.graficar_env, yychar, yyline + 1, yytext());
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
