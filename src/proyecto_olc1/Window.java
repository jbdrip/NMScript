/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_olc1;

import Analyzers.parser;
import Analyzers.parser_;
import Analyzers.scanner;
import Analyzers.scanner_;
import Enviroment.Enviroment;
import Enviroment.Sym;
import Tree.Break;
import Tree.Class_;
import Tree.Continue;
import Tree.Declaration;
import Tree.Expression;
import Tree.Function;
import Tree.FunctionVoid_Call;
import Tree.Import;
import Tree.Instance;
import Tree.Instruction;
import Tree.ParametersIns;
import Tree.Signature;
import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JViewport;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.Utilities;

/**
 *
 * @author Jose
 */
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Window() {
        initComponents();
    }
    
    public String name;
    public scanner scanner;
    public parser parser;
    public scanner_ scanner_;
    public parser_ parser_;
    public LinkedList<Instruction> root = null;
    public ArrayList<Error_> errorList;
    public ErrorTable errorTable;
    int tabCounter = 0;
    boolean open = false;
    String[] paths = new String[50];
    
    public StyleContext sc = new StyleContext();
    public DefaultStyledDocument doc = new DefaultStyledDocument(sc);
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputConsole = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        createButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveHowButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        analyzeButton = new javax.swing.JButton();
        reportsButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lineLabel = new javax.swing.JLabel();
        columnLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(700, 650));

        tabs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabs.setAutoscrolls(true);

        outputConsole.setEditable(false);
        outputConsole.setColumns(20);
        outputConsole.setRows(5);
        outputConsole.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(outputConsole);

        jLabel1.setText("CONSOLA DE SALIDA:");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        createButton.setText("   NUEVO   ");
        createButton.setFocusable(false);
        createButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(createButton);

        openButton.setText("   ABRIR   ");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        saveButton.setText("   GUARDAR   ");
        saveButton.setEnabled(false);
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        saveHowButton.setText("   GUARDAR COMO   ");
        saveHowButton.setFocusable(false);
        saveHowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveHowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveHowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveHowButton);

        jButton1.setText("CERRAR");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        analyzeButton.setText("   ANALIZAR   ");
        analyzeButton.setFocusable(false);
        analyzeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        analyzeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(analyzeButton);

        reportsButton.setText("   REPORTES   ");
        reportsButton.setFocusable(false);
        reportsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reportsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reportsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(reportsButton);

        jButton2.setText("ARBOL RESULTANTE");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        lineLabel.setText("LINEA:");
        lineLabel.setPreferredSize(new java.awt.Dimension(100, 14));

        columnLabel.setText("COLUMNA:");
        columnLabel.setPreferredSize(new java.awt.Dimension(50, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
            .addComponent(jScrollPane1)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(columnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(columnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        String aux = "";
        String text = "";
        String fileName = "";
        
        try 
        {
            JFileChooser file = new JFileChooser(new File(System.getProperty("user.dir")));
            FileFilter dataFilter = new FileNameExtensionFilter("NM (.nm)", "nm");
            file.setFileFilter(dataFilter);
            file.showOpenDialog(this);
            File choosen = file.getSelectedFile();
            
            if (choosen != null) 
            {
                FileReader fileReader = new FileReader(choosen);
                BufferedReader reader = new BufferedReader(fileReader);
                paths[tabs.getComponentCount()] = file.getSelectedFile().getAbsolutePath();
                fileName = file.getSelectedFile().getName();
                
                while ((aux = reader.readLine()) != null) text += aux + "\n";
                reader.close();
                
                JTextPane newFile = new JTextPane();
                newFile.setDocument(doc);
                newFile.addCaretListener(new CaretListener()
                {
                    public void caretUpdate(CaretEvent e)
                    {
                        lineLabel.setText("LINEA: " + getRow(e.getDot(), (JTextPane)e.getSource()));
                        columnLabel.setText("COLUMNA: " + getColumn(e.getDot(), (JTextPane)e.getSource()));
                    }
                });
                newFile.setText(text);
                JScrollPane jsp = new JScrollPane(newFile);
                tabs.addTab(fileName, jsp);
                saveButton.setEnabled(true);
            }
        }
        catch (IOException ex){ JOptionPane.showMessageDialog(null, "Error Importando - " + ex); }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try
        {
            JFileChooser file =new JFileChooser(new File(System.getProperty("user.dir")));
            FileFilter reportFilter = new FileNameExtensionFilter("NM (.nm)", "nm");
            JScrollPane scrollPane = (JScrollPane) tabs.getComponentAt(tabs.getSelectedIndex());
            JViewport viewport = scrollPane.getViewport(); 
            JTextPane current = (JTextPane)viewport.getView();
            file.setFileFilter(reportFilter);
            
            if(!paths[tabs.getSelectedIndex()].equals(""))
            {
                if(new File(paths[tabs.getSelectedIndex()]).exists())
                {
                    FileWriter save = new FileWriter(new File(paths[tabs.getSelectedIndex()]));
                    save.write(current.getText());
                    save.close();
                    JOptionPane.showMessageDialog(null, "Guardado con exito.");
                }
                else JOptionPane.showMessageDialog(null, "El archivo cambio de ruta o dejo de existir.");
            }
            else
            {
                file.showSaveDialog(this);
                File choosen =file.getSelectedFile();
                
                if(choosen != null)
                {
                    paths[tabs.getSelectedIndex()] = file.getSelectedFile().getAbsolutePath();
                    name = file.getSelectedFile().getName();
                    
                    if(name.contains(".nm"))
                    {
                        FileWriter save = new FileWriter(choosen);
                        save.write(current.getText());
                        save.close();
                    }
                    else
                    {
                        FileWriter save = new FileWriter(choosen + ".nm");
                        save.write(current.getText());
                        save.close();
                    }
                    JOptionPane.showMessageDialog(null, "Guardado con exito.");
                }
            }
            open = true;
        }
        catch(IOException exp)
        {
            System.out.println(exp);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        JTextPane newFile = new JTextPane();
        newFile.setDocument(doc);
        newFile.addCaretListener(new CaretListener()
        {
            public void caretUpdate(CaretEvent e)
            {
                lineLabel.setText("LINEA: " + getRow(e.getDot(), (JTextPane)e.getSource()));
                columnLabel.setText("COLUMNA: " + getColumn(e.getDot(), (JTextPane)e.getSource()));
            }
        });
        JScrollPane jsp = new JScrollPane(newFile);
        paths[tabs.getComponentCount()] = "";
        tabs.addTab("", jsp);
    }//GEN-LAST:event_createButtonActionPerformed

    private void saveHowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHowButtonActionPerformed
        try
        {
            JFileChooser file =new JFileChooser(new File(System.getProperty("user.dir")));
            FileFilter reportFilter = new FileNameExtensionFilter("NM (.nm)", "nm");
            JScrollPane scrollPane = (JScrollPane) tabs.getComponentAt(tabs.getSelectedIndex());
            JViewport viewport = scrollPane.getViewport(); 
            JTextPane current = (JTextPane)viewport.getView();
            file.setFileFilter(reportFilter);

            file.showSaveDialog(this);
            File choosen = file.getSelectedFile();
                
            if(choosen != null)
            {
                paths[tabs.getSelectedIndex()] = file.getSelectedFile().getAbsolutePath();
                name = file.getSelectedFile().getName();

                if(name.contains(".nm"))
                {
                    FileWriter save = new FileWriter(choosen);
                    save.write(current.getText());
                    save.close();
                    tabs.setTitleAt(tabs.getSelectedIndex(), name);
                }
                else
                {
                    FileWriter save = new FileWriter(choosen + ".nm");
                    save.write(current.getText());
                    save.close();
                    tabs.setTitleAt(tabs.getSelectedIndex(), name + ".nm");
                    paths[tabs.getSelectedIndex()] += ".nm";
                }
                JOptionPane.showMessageDialog(null, "Guardado con exito.");
            }
        }
        catch(IOException exp)
        {
            System.out.println(exp);
        }
    }//GEN-LAST:event_saveHowButtonActionPerformed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        try 
        {
            outputConsole.setText("");
            analyze();
        }
        catch (Exception ex) { Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex); }
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void reportsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsButtonActionPerformed
        File fileDat = new File(System.getProperty("user.dir") + "\\reportes\\TablaErrores.html");
        Desktop desktop;
            
        if(Desktop.isDesktopSupported())
        {
            desktop = Desktop.getDesktop();
            try
            {
                desktop.open(fileDat);
            }
            catch (Exception ex) {}
        }
    }//GEN-LAST:event_reportsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tabs.remove(tabs.getSelectedIndex());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FileWriter fw = null;
        ProcessBuilder pbuilder = null;
        
        if(!"".equals(parser_.salida))
        {
            try
            {
                fw = new FileWriter("G_AST.dot");
                PrintWriter pw = new PrintWriter(fw);
                pw.print(parser_.salida + "}");
                pbuilder = new ProcessBuilder( "dot", "-Tpdf", "G_AST.dot", "-o", "G_AST.pdf");
                pbuilder.redirectErrorStream(true);
                fw.close();
                pbuilder.start();
                
                Desktop desktop;
            
                if(Desktop.isDesktopSupported())
                {
                    desktop = Desktop.getDesktop();
                    File pdf = new File("G_AST.pdf");
                    desktop.open(pdf);
                }
            }
            catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else JOptionPane.showMessageDialog(null, "¡ERROR!\n Se debe de analizar una cadena de entrada antes de poder realizar la grafica del arbol AST.");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void analyze() throws Exception
    {
        JScrollPane current = (JScrollPane) tabs.getComponentAt(tabs.getSelectedIndex());
        JViewport viewport = current.getViewport(); 
        JTextPane editor = (JTextPane)viewport.getView();
        String input = editor.getText();
        boolean error = false;
        
        errorList = new ArrayList();
        scanner = new scanner(new BufferedReader(new StringReader(input)));
        //scanner_ = new scanner_(new BufferedReader(new StringReader(input)));
        //scanner_.paint.insertar(input);
        //parser_ = new parser_(scanner_);
        //parser_.parse();
        //editor.setDocument(scanner_.paint.caja2.getDocument());
        parser = new parser(scanner);
        parser.parse();
        root = parser.AST;
        
        if(!scanner.errorList.isEmpty())
        {
            Iterator<Error_> iterator = scanner.errorList.iterator();
            while(iterator.hasNext()) errorList.add(iterator.next());
            error = true;
        }
        
        if(!parser.errorList.isEmpty())
        {
            Iterator<Error_> iterator = parser.errorList.iterator();
            while(iterator.hasNext()) errorList.add(iterator.next());
            error = true;
        }
        
        if(error)
        {
            JOptionPane.showMessageDialog(null, "Se han encontrado uno o varios errores en el analisis, verificar en \"REPORTES\" para tabla en formato html");
            errorTable = new ErrorTable();
            errorTable.buildRepTable(errorList);
        }
        else
        {
            Enviroment global = new Enviroment(null);
            global.setGlobal(true);
            executeImports(root, global);
            executeAST(root, global);
        }
    }
    
    void executeImports(LinkedList<Instruction> root, Enviroment global)
    {
        if(root == null)
        {
            System.out.println("No es posible ejecutar las instrucciones porque\r\n"
                    + "el árbol no fue cargado de forma adecuada por la existencia\r\n"
                    + "de errores léxicos o sintácticos.");
            return;
        }
        
        for(Instruction ins : root)
        {
            if(ins != null && (ins instanceof Import))
            {
                ins.execute(global);
            }
        }
        
        if(!global.errors.isEmpty())
        {
            Iterator<Error_> iterator = global.errors.iterator();
            while(iterator.hasNext()) errorList.add(iterator.next());
            JOptionPane.showMessageDialog(null, "Se han encontrado uno o varios errores en el analisis, verificar en \"REPORTES\" para tabla en formato html");
            errorTable = new ErrorTable();
            errorTable.buildRepTable(errorList);
        }
    }
    
    void executeAST(LinkedList<Instruction> root, Enviroment global)
    {
        if(root == null)
        {
            System.out.println("No es posible ejecutar las instrucciones porque\r\n"
                    + "el árbol no fue cargado de forma adecuada por la existencia\r\n"
                    + "de errores léxicos o sintácticos.");
            return;
        }
        
        int classCounter = 0;
        for(Instruction ins : root)
        {
            if(ins != null && (ins instanceof Class_))
            {
                classCounter++;
                if(classCounter > 1)
                {
                    Error_ error = new Error_(ins.getLine(), ins.getColumn(), "Sintactico", "Elemento sintactico desconocido: 'class'.");
                    global.errors.add(error);
                    break;
                }
                ins.execute(global);
            }
        }
        
        if(classCounter < 2)
        {
            Enviroment local = new Enviroment(global);
            local.setOnClass(true);
            
            for(Map.Entry<String, Sym> entry : global.table.entrySet())
            {
                Sym sym = entry.getValue();
                if((sym.type == Sym.EnumType.clase))
                {
                    LinkedList<Instruction> instructions = (LinkedList<Instruction>)sym.value;
                    
                    for(Instruction ins : instructions)
                    {
                        if(ins instanceof Tree.Void || ins instanceof Function) ins.execute(local);
                    }
                    for(Instruction ins : instructions)
                    {
                        if(!(ins instanceof Tree.Void) && !(ins instanceof Function))
                        {
                            if(ins instanceof Signature)
                            {
                                Signature signature = (Signature) ins;
                                signature.paramsResult = executeParams(signature.parameters, local);
                                ins = signature;
                            }
                            else if(ins instanceof Instance)
                            {
                                Instance instance = (Instance) ins;
                                instance.paramsResult = executeParams(instance.parameters, local);
                                ins = instance;
                            }
                            else if(ins instanceof FunctionVoid_Call)
                            {
                                FunctionVoid_Call call = (FunctionVoid_Call) ins;
                                call.paramsResult = executeParams(call.parametersExpression, local);
                                ins = call;
                            }
                            else if(ins instanceof Expression)
                            {
                                Expression expression = (Expression) ins;
                                expression.paramsResult = executeParams(expression.parameters, local);
                                ins = expression;
                            }
                            ins.execute(local);
                        }
                    }
                    break;
                }
            }
            
            Sym functionVoid_ = local.search("main0$$", 0, 0);
            if(functionVoid_ != null)
            {
                ParametersIns parametersIns = (ParametersIns) functionVoid_.value;
                LinkedList<Instruction> instructions = parametersIns.instructions;

                if(instructions != null)
                {
                    Enviroment mainEnv = new Enviroment(local);
                    for(Instruction ins : instructions)
                    {
                        if(ins instanceof Signature)
                            {
                                Signature signature = (Signature) ins;
                                signature.paramsResult = executeParams(signature.parameters, mainEnv);
                                ins = signature;
                            }
                            else if(ins instanceof Instance)
                            {
                                Instance instance = (Instance) ins;
                                instance.paramsResult = executeParams(instance.parameters, mainEnv);
                                ins = instance;
                            }
                            else if(ins instanceof FunctionVoid_Call)
                            {
                                FunctionVoid_Call call = (FunctionVoid_Call) ins;
                                call.paramsResult = executeParams(call.parametersExpression, mainEnv);
                            }
                            else if(ins instanceof Expression)
                            {
                                Expression expression = (Expression) ins;
                                expression.paramsResult = executeParams(expression.parameters, mainEnv);
                                ins = expression;
                            }
                        Object instruction = ins.execute(mainEnv);
                        if ((instruction != null && (instruction instanceof String)) && instruction.toString().equals("return"))
                        {
                            break;
                        }
                        else if ((instruction != null && (instruction instanceof String)) && instruction.toString().equals("break"))
                        {
                            Error_ error = new Error_(ins.getLine(), ins.getColumn(), "Semantico", "'break' afuera de un ciclo o switch.");
                            global.errors.add(error);
                        }
                        else if ((instruction != null && (instruction instanceof String)) && instruction.toString().equals("continue"))
                        {
                            Error_ error = new Error_(ins.getLine(), ins.getColumn(), "Semantico", "'cotinue' afuera de un ciclo.");
                            global.errors.add(error);
                        }
                        else if (instruction != null && instruction instanceof Sym)
                        {
                            if(((Sym)instruction).breturn)
                            {
                                Error_ error = new Error_(ins.getLine(), ins.getColumn(), "Semantico", "'return EXPRESION' afuera de una funcion.");
                                global.errors.add(error);
                            }
                        }
                    }
                }
            }
        }
        
        if(!global.errors.isEmpty())
        {
            Iterator<Error_> iterator = global.errors.iterator();
            while(iterator.hasNext()) errorList.add(iterator.next());
            JOptionPane.showMessageDialog(null, "Se han encontrado uno o varios errores en el analisis, verificar en \"REPORTES\" para tabla en formato html");
            errorTable = new ErrorTable();
            errorTable.buildRepTable(errorList);
        }
        
        Iterator<String> sout = global.printList.iterator();
        while(sout.hasNext()) outputConsole.append(sout.next());
    }
    
    public LinkedList<Sym> executeParams(LinkedList<Expression> parameters, Enviroment env)
    {
        LinkedList<Sym> params = new LinkedList<>();
        if(parameters != null)
        {
            for(Expression exp : parameters)
            {
                executeParams(exp, env);
                Object r = exp.execute(env);
                if(r instanceof Sym)
                {
                    Sym s = (Sym) r;
                    params.add(s);
                }
            }
        }
        return params;
    }
    
    public void executeParams(Expression e, Enviroment env)
    {
        if(e != null && e.parameters != null)
        {
            e.paramsResult = new LinkedList<>();
            for(Expression exp : e.parameters)
            {
                executeParams(exp, env);
                Object r = exp.execute(env);
                if(r instanceof Sym)
                {
                    Sym s = (Sym) r;
                    e.paramsResult.add(s);
                }
            }
        }
    }
    
    public static int getRow(int pos, JTextPane editor)
    {
        int rn = (pos == 0) ? 1 : 0;
        
        try {
            int offs = pos;
            while(offs > 0)
            {
                offs = Utilities.getRowStart(editor, offs) - 1;
                rn++;
            }
        }
        catch (BadLocationException e) { e.printStackTrace();}
        return rn;
    }

    public static int getColumn(int pos, JTextPane editor)
    {
        try 
        {
            return pos-Utilities.getRowStart(editor, pos) + 1;
        }
        catch (BadLocationException e) { e.printStackTrace(); }
        return -1;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.JLabel columnLabel;
    private javax.swing.JButton createButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lineLabel;
    private javax.swing.JButton openButton;
    private javax.swing.JTextArea outputConsole;
    private javax.swing.JButton reportsButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveHowButton;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
